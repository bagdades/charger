
build/charger.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000ad6  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800158  00800158  00000bc2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199c  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000039ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9c  00000000  00000000  000040d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005073  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 36       	cpi	r26, 0x61	; 97
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 03 	call	0x698	; 0x698 <main>
  9e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LcdCommand>:
	 _delay_us(100);
}

void LcdCommand(unsigned char command)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (command & 0xF0);
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	28 2f       	mov	r18, r24
  ac:	20 7f       	andi	r18, 0xF0	; 240
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
	LCD_PRT &= ~ (1 << LCD_RS);
  b2:	58 98       	cbi	0x0b, 0	; 11
	LCD_PRT &= ~ (1 << LCD_RW); 
  b4:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
  b6:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	35 e0       	ldi	r19, 0x05	; 5
  ba:	3a 95       	dec	r19
  bc:	f1 f7       	brne	.-4      	; 0xba <LcdCommand+0x14>
  be:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~ (1 << LCD_EN);
  c0:	5a 98       	cbi	0x0b, 2	; 11
  c2:	9a e6       	ldi	r25, 0x6A	; 106
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LcdCommand+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LcdCommand+0x24>
	_delay_us(20);
	LCD_PRT = (LCD_PRT & 0x0F) | (command << 4);
  ca:	2b b1       	in	r18, 0x0b	; 11
  cc:	2f 70       	andi	r18, 0x0F	; 15
  ce:	30 e1       	ldi	r19, 0x10	; 16
  d0:	83 9f       	mul	r24, r19
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	82 2b       	or	r24, r18
  d8:	8b b9       	out	0x0b, r24	; 11
	LCD_PRT |= (1 << LCD_EN);
  da:	5a 9a       	sbi	0x0b, 2	; 11
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LcdCommand+0x38>
  e2:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);
  e4:	5a 98       	cbi	0x0b, 2	; 11
  e6:	08 95       	ret

000000e8 <LcdInit>:
#include "lcd.h"


void LcdInit(void)
{
	 LCD_DDR = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
	 LCD_PRT &= ~(1 << LCD_EN);
  ec:	5a 98       	cbi	0x0b, 2	; 11
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LcdInit+0xa>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LcdInit+0x10>
  f8:	00 00       	nop
	 _delay_us(2000);
	 LcdCommand(0x33);
  fa:	83 e3       	ldi	r24, 0x33	; 51
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 100:	8f e8       	ldi	r24, 0x8F	; 143
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdInit+0x1c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdInit+0x22>
 10a:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x32);
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 112:	8f e8       	ldi	r24, 0x8F	; 143
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LcdInit+0x2e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LcdInit+0x34>
 11c:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x28);
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LcdInit+0x40>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LcdInit+0x46>
 12e:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x0c);
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 136:	8f e8       	ldi	r24, 0x8F	; 143
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LcdInit+0x52>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LcdInit+0x58>
 140:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9f e1       	ldi	r25, 0x1F	; 31
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdInit+0x64>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdInit+0x6a>
 152:	00 00       	nop
	 _delay_us(2000);
	 LcdCommand(0x06);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 15a:	8f e8       	ldi	r24, 0x8F	; 143
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LcdInit+0x76>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LcdInit+0x7c>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LcdData>:
	LCD_PRT &= ~(1 << LCD_EN);
}

void LcdData(unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	28 2f       	mov	r18, r24
 16e:	20 7f       	andi	r18, 0xF0	; 240
 170:	92 2b       	or	r25, r18
 172:	9b b9       	out	0x0b, r25	; 11
	LCD_PRT |= (1 << LCD_RS);
 174:	58 9a       	sbi	0x0b, 0	; 11
	LCD_PRT &= ~(1 << LCD_RW);
 176:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
 178:	5a 9a       	sbi	0x0b, 2	; 11
 17a:	35 e0       	ldi	r19, 0x05	; 5
 17c:	3a 95       	dec	r19
 17e:	f1 f7       	brne	.-4      	; 0x17c <LcdData+0x14>
 180:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);
 182:	5a 98       	cbi	0x0b, 2	; 11
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 184:	2b b1       	in	r18, 0x0b	; 11
 186:	2f 70       	andi	r18, 0x0F	; 15
 188:	30 e1       	ldi	r19, 0x10	; 16
 18a:	83 9f       	mul	r24, r19
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	82 2b       	or	r24, r18
 192:	8b b9       	out	0x0b, r24	; 11
	LCD_PRT |= (1 << LCD_RS);
 194:	58 9a       	sbi	0x0b, 0	; 11
	LCD_PRT &= ~(1 << LCD_RW);
 196:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
 198:	5a 9a       	sbi	0x0b, 2	; 11
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LcdData+0x34>
 1a0:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);         
 1a2:	5a 98       	cbi	0x0b, 2	; 11
 1a4:	8f e8       	ldi	r24, 0x8F	; 143
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LcdData+0x40>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LcdData+0x46>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LcdGotoxy>:
	_delay_us(100);
}

void LcdGotoxy(unsigned char x, unsigned char y)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <LcdGotoxy+0xa>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <LcdGotoxy+0xc>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char FIRSTCHARADDR[] = {0x80,0xc0,0x94,0xd4};// four line's address for 20x4 lcd
 1c2:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_start+0x4>
 1d2:	09 83       	std	Y+1, r16	; 0x01
 1d4:	1a 83       	std	Y+2, r17	; 0x02
 1d6:	2b 83       	std	Y+3, r18	; 0x03
 1d8:	3c 83       	std	Y+4, r19	; 0x04
	LcdCommand(FIRSTCHARADDR[y-1]+x-1);
 1da:	fe 01       	movw	r30, r28
 1dc:	e6 0f       	add	r30, r22
 1de:	f1 1d       	adc	r31, r1
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	90 81       	ld	r25, Z
 1e4:	89 0f       	add	r24, r25
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 1ea:	8f e8       	ldi	r24, 0x8F	; 143
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LcdGotoxy+0x3c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LcdGotoxy+0x42>
 1f4:	00 00       	nop
	_delay_us(100);
}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <LcdPrint>:

void LcdPrint(char*str)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	8c 01       	movw	r16, r24
	unsigned char i=0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != 0)
 212:	f8 01       	movw	r30, r16
 214:	ec 0f       	add	r30, r28
 216:	f1 1d       	adc	r31, r1
 218:	80 81       	ld	r24, Z
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <LcdPrint+0x1e>
	{ 
		LcdData(str[i]);
 21e:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
		i++;
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	f6 cf       	rjmp	.-20     	; 0x212 <LcdPrint+0xa>
	}
}
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <LcdClear>:

void LcdClear(void)
{
	LcdCommand(0x01);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LcdClear+0xa>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LcdClear+0x10>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <PWM_Init>:

uint16_t volt_temp, amp_temp;
uint8_t OCR_temp, calib_mode, batt, cc_mode, cv_mode, li_ion=1;//to denote li_ion as default battery type

void PWM_Init(void)
{
 242:	08 95       	ret

00000244 <SwPressed>:
	/* OCR2=0; */
}

uint8_t SwPressed(void)
{
	if (bit_is_clear(SW_PIN, PB4)) 
 244:	1c 99       	sbic	0x03, 4	; 3
 246:	19 c0       	rjmp	.+50     	; 0x27a <SwPressed+0x36>
 248:	2f e7       	ldi	r18, 0x7F	; 127
 24a:	88 e3       	ldi	r24, 0x38	; 56
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <SwPressed+0xa>
 256:	00 c0       	rjmp	.+0      	; 0x258 <SwPressed+0x14>
 258:	00 00       	nop
	{
		_delay_ms(25);
		if (bit_is_clear(SW_PIN, PB4)) 
 25a:	1c 99       	sbic	0x03, 4	; 3
 25c:	02 c0       	rjmp	.+4      	; 0x262 <SwPressed+0x1e>
			while(bit_is_clear(SW_PIN, PB4));
 25e:	1c 9b       	sbis	0x03, 4	; 3
 260:	fe cf       	rjmp	.-4      	; 0x25e <SwPressed+0x1a>
		if(calib_mode == 0)
 262:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 266:	81 11       	cpse	r24, r1
 268:	04 c0       	rjmp	.+8      	; 0x272 <SwPressed+0x2e>
			calib_mode = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
 270:	08 95       	ret
		else 
			calib_mode = 0;
 272:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret
		return 1;
	}
	return 0;
 27a:	80 e0       	ldi	r24, 0x00	; 0
}
 27c:	08 95       	ret

0000027e <MeasureVolt>:
uint16_t MeasureVolt(void)
{
	unsigned int adc_avg;
	unsigned int volt;
	float temp_val;
	adc_avg = ADC_ReadAvg(1, 101);
 27e:	65 e6       	ldi	r22, 0x65	; 101
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 9a 03 	call	0x734	; 0x734 <ADC_ReadAvg>
	temp_val = (adc_avg * REF_VOLT * DIV) / 1024;
	volt = (unsigned int)(temp_val * 100);
	return volt;
 288:	bc 01       	movw	r22, r24
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatunsisf>
 292:	2c ee       	ldi	r18, 0xEC	; 236
 294:	31 e5       	ldi	r19, 0x51	; 81
 296:	40 ea       	ldi	r20, 0xA0	; 160
 298:	50 e4       	ldi	r21, 0x40	; 64
 29a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e8       	ldi	r20, 0x80	; 128
 2a4:	50 e4       	ldi	r21, 0x40	; 64
 2a6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5a e3       	ldi	r21, 0x3A	; 58
 2b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	48 ec       	ldi	r20, 0xC8	; 200
 2bc:	52 e4       	ldi	r21, 0x42	; 66
 2be:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3>
 2c2:	0e 94 3f 04 	call	0x87e	; 0x87e <__fixunssfsi>
}
 2c6:	cb 01       	movw	r24, r22
 2c8:	08 95       	ret

000002ca <MeasureAmp>:
{
	/* float temp_val; */
	/* uint16_t result; */
	uint16_t amp = 0;
	return amp;
}
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 95       	ret

000002d0 <PrintConst1>:

void PrintConst1(void)
{
	LcdGotoxy(1,1);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Vo-");
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(6,1);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 2e8:	8e e2       	ldi	r24, 0x2E	; 46
 2ea:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdGotoxy(16,1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('%');
 2f6:	85 e2       	ldi	r24, 0x25	; 37
 2f8:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdGotoxy(1,2);
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Vb-");
 304:	89 e0       	ldi	r24, 0x09	; 9
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(10,2);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Ia-");
 314:	8d e0       	ldi	r24, 0x0D	; 13
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(15,2);
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 324:	8e e2       	ldi	r24, 0x2E	; 46
 326:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

0000032a <PrintParam>:
}

void PrintParam(uint8_t x1, uint8_t y1, uint16_t val2)
{
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	c8 2f       	mov	r28, r24
 334:	d6 2f       	mov	r29, r22
 336:	8a 01       	movw	r16, r20
	LcdGotoxy(x1, y1);
 338:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData((val2 / 1000) + 48);
 33c:	c8 01       	movw	r24, r16
 33e:	68 ee       	ldi	r22, 0xE8	; 232
 340:	73 e0       	ldi	r23, 0x03	; 3
 342:	0e 94 09 04 	call	0x812	; 0x812 <__udivmodhi4>
 346:	8c 01       	movw	r16, r24
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	86 0f       	add	r24, r22
 34c:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val2 %= 1000;
	LcdData((val2 / 100) + 48);
 350:	c8 01       	movw	r24, r16
 352:	64 e6       	ldi	r22, 0x64	; 100
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 09 04 	call	0x812	; 0x812 <__udivmodhi4>
 35a:	8c 01       	movw	r16, r24
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	86 0f       	add	r24, r22
 360:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val2 %= 100;
	LcdGotoxy((x1 + 2), y1);
 364:	6d 2f       	mov	r22, r29
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	8c 0f       	add	r24, r28
 36a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 36e:	8e e2       	ldi	r24, 0x2E	; 46
 370:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdData((val2 / 10) + 48);
 374:	c8 01       	movw	r24, r16
 376:	6a e0       	ldi	r22, 0x0A	; 10
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	0e 94 09 04 	call	0x812	; 0x812 <__udivmodhi4>
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	86 0f       	add	r24, r22
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
	val2 %= 1000;
	LcdData((val2 / 100) + 48);
	val2 %= 100;
	LcdGotoxy((x1 + 2), y1);
	LcdData('.');
	LcdData((val2 / 10) + 48);
 38a:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

0000038e <Print>:
}

void Print(uint8_t val)
{
 38e:	cf 93       	push	r28
	val %= 100;
 390:	64 e6       	ldi	r22, 0x64	; 100
 392:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__udivmodqi4>
 396:	89 2f       	mov	r24, r25
	LcdData((val / 10) + 48);
 398:	6a e0       	ldi	r22, 0x0A	; 10
 39a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__udivmodqi4>
 39e:	c9 2f       	mov	r28, r25
 3a0:	80 5d       	subi	r24, 0xD0	; 208
 3a2:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val %= 10;
	LcdData(val + 48);
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	8c 0f       	add	r24, r28
}
 3aa:	cf 91       	pop	r28
void Print(uint8_t val)
{
	val %= 100;
	LcdData((val / 10) + 48);
	val %= 10;
	LcdData(val + 48);
 3ac:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

000003b0 <PrintDuty>:
}

void PrintDuty(uint8_t vall)
{
 3b0:	cf 93       	push	r28
 3b2:	c8 2f       	mov	r28, r24
	uint16_t temp;
	temp = ((vall + 1) * 100) / 256;
	LcdGotoxy(14, 1);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	8e e0       	ldi	r24, 0x0E	; 14
 3b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	Print((uint8_t)temp);
 3bc:	8c 2f       	mov	r24, r28
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	44 e6       	ldi	r20, 0x64	; 100
 3c4:	48 9f       	mul	r20, r24
 3c6:	90 01       	movw	r18, r0
 3c8:	49 9f       	mul	r20, r25
 3ca:	30 0d       	add	r19, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	83 2f       	mov	r24, r19
}
 3d0:	cf 91       	pop	r28
void PrintDuty(uint8_t vall)
{
	uint16_t temp;
	temp = ((vall + 1) * 100) / 256;
	LcdGotoxy(14, 1);
	Print((uint8_t)temp);
 3d2:	0c 94 c7 01 	jmp	0x38e	; 0x38e <Print>

000003d6 <ChargeLiIon>:
}

void ChargeLiIon(void)
{
 3d6:	cf 93       	push	r28
	PORTB &= ~(1 << 1);//off mosfet in order to read the battery
 3d8:	29 98       	cbi	0x05, 1	; 5
 3da:	8f e3       	ldi	r24, 0x3F	; 63
 3dc:	9c e9       	ldi	r25, 0x9C	; 156
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <ChargeLiIon+0x8>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <ChargeLiIon+0xe>
 3e4:	00 00       	nop
	_delay_ms(10);
	if (volt_temp == 0) 
 3e6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <volt_temp>
 3ea:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <volt_temp+0x1>
 3ee:	89 2b       	or	r24, r25
 3f0:	b9 f0       	breq	.+46     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{
				batt = 1;
			}
		}
	}
	if ((volt_temp < 900) && (volt_temp > 0)) 
 3f2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <volt_temp>
 3f6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <volt_temp+0x1>
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	83 38       	cpi	r24, 0x83	; 131
 3fe:	93 40       	sbci	r25, 0x03	; 3
 400:	c0 f5       	brcc	.+112    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
	{
		LcdClear();
 402:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		LcdGotoxy(1, 1);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint(" Faulty battery");
 40e:	81 e2       	ldi	r24, 0x21	; 33
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		li_ion = 0;
 416:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		batt = 0;
 41a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <batt>
 41e:	29 c0       	rjmp	.+82     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
{
	PORTB &= ~(1 << 1);//off mosfet in order to read the battery
	_delay_ms(10);
	if (volt_temp == 0) 
	{
		LcdClear();
 420:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		LcdGotoxy(1, 1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint(" Insert battery");
 42c:	81 e1       	ldi	r24, 0x11	; 17
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		batt = 0;
 434:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <batt>
		{
			volt_temp = MeasureVolt();
			_delay_ms(500);
			if (volt_temp > 0) 
			{
				batt = 1;
 438:	c1 e0       	ldi	r28, 0x01	; 1
	{
		LcdClear();
		LcdGotoxy(1, 1);
		LcdPrint(" Insert battery");
		batt = 0;
		while (batt == 0) 
 43a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <batt>
 43e:	81 11       	cpse	r24, r1
 440:	d8 cf       	rjmp	.-80     	; 0x3f2 <ChargeLiIon+0x1c>
		{
			volt_temp = MeasureVolt();
 442:	0e 94 3f 01 	call	0x27e	; 0x27e <MeasureVolt>
 446:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <volt_temp+0x1>
 44a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <volt_temp>
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	99 e6       	ldi	r25, 0x69	; 105
 452:	28 e1       	ldi	r18, 0x18	; 24
 454:	81 50       	subi	r24, 0x01	; 1
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	20 40       	sbci	r18, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
			_delay_ms(500);
			if (volt_temp > 0) 
 460:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <volt_temp>
 464:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <volt_temp+0x1>
 468:	89 2b       	or	r24, r25
 46a:	39 f3       	breq	.-50     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			{
				batt = 1;
 46c:	c0 93 59 01 	sts	0x0159, r28	; 0x800159 <batt>
 470:	e4 cf       	rjmp	.-56     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		LcdGotoxy(1, 1);
		LcdPrint(" Faulty battery");
		li_ion = 0;
		batt = 0;
	}
	if (volt_temp > 900) 
 472:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <volt_temp>
 476:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <volt_temp+0x1>
 47a:	85 38       	cpi	r24, 0x85	; 133
 47c:	93 40       	sbci	r25, 0x03	; 3
 47e:	18 f0       	brcs	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		batt = 1;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <batt>
	}
	if (batt == 1) 
 486:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <batt>
 48a:	c1 30       	cpi	r28, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	cd c0       	rjmp	.+410    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
	{
		LcdClear();
 490:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		PrintConst1();
 494:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintConst1>
		cc_mode = 1;
 498:	c0 93 5a 01 	sts	0x015A, r28	; 0x80015a <cc_mode>
		LcdGotoxy(9, 1);
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint("CC");
 4a4:	81 e3       	ldi	r24, 0x31	; 49
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		OCR2A = 63;
 4ac:	8f e3       	ldi	r24, 0x3F	; 63
 4ae:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				LcdPrint("  ");
			}
			else
			{
				PrintParam(4, 2, volt_temp);
				PORTB |= (1 << 1);
 4b2:	29 9a       	sbi	0x05, 1	; 5
		LcdGotoxy(9, 1);
		LcdPrint("CC");
		OCR2A = 63;
		PORTB |= (1 << 1);

		while (cc_mode == 1) 
 4b4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cc_mode>
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	09 f0       	breq	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4bc:	47 c0       	rjmp	.+142    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		{
			amp_temp = MeasureAmp();
 4be:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <amp_temp+0x1>
 4c2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <amp_temp>
			/* } */
			/* else */
			/* { */
			/* 	OCR2--; */
			/* } */
			PrintParam(4, 1, volt_temp);
 4c6:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <volt_temp>
 4ca:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <volt_temp+0x1>
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	84 e0       	ldi	r24, 0x04	; 4
 4d2:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
			PrintParam(13, 2, amp_temp);
 4d6:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <amp_temp>
 4da:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <amp_temp+0x1>
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
			PrintDuty(OCR2A);
 4e6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PrintDuty>
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	99 e6       	ldi	r25, 0x69	; 105
 4f2:	28 e1       	ldi	r18, 0x18	; 24
 4f4:	81 50       	subi	r24, 0x01	; 1
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	20 40       	sbci	r18, 0x00	; 0
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fe:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1 << 1);
 500:	29 98       	cbi	0x05, 1	; 5
 502:	8f e3       	ldi	r24, 0x3F	; 63
 504:	9c e9       	ldi	r25, 0x9C	; 156
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50c:	00 00       	nop
			_delay_ms(10);
			volt_temp = MeasureVolt();
 50e:	0e 94 3f 01 	call	0x27e	; 0x27e <MeasureVolt>
 512:	ac 01       	movw	r20, r24
 514:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <volt_temp+0x1>
 518:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <volt_temp>
			if (volt_temp > 1240) 
 51c:	49 3d       	cpi	r20, 0xD9	; 217
 51e:	94 e0       	ldi	r25, 0x04	; 4
 520:	59 07       	cpc	r21, r25
 522:	78 f0       	brcs	.+30     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			{
				cc_mode = 0;
 524:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <cc_mode>
				PrintParam(4, 2, volt_temp);
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
				LcdGotoxy(9, 1);
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	89 e0       	ldi	r24, 0x09	; 9
 534:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
				LcdPrint("  ");
 538:	84 e3       	ldi	r24, 0x34	; 52
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
 540:	b9 cf       	rjmp	.-142    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
			}
			else
			{
				PrintParam(4, 2, volt_temp);
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
 54a:	b3 cf       	rjmp	.-154    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				PORTB |= (1 << 1);
			}
		}
		cv_mode = 1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <cv_mode>
		LcdGotoxy(9, 1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	89 e0       	ldi	r24, 0x09	; 9
 556:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint("CV");
 55a:	87 e3       	ldi	r24, 0x37	; 55
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
				break;
			}
			else
			{
				PrintParam(13, 2, amp_temp);
				PORTB |= (1 << 1);
 562:	29 9a       	sbi	0x05, 1	; 5
		}
		cv_mode = 1;
		LcdGotoxy(9, 1);
		LcdPrint("CV");
		PORTB |= (1 << 1);
		while (cv_mode == 1) 
 564:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <cv_mode>
 568:	81 30       	cpi	r24, 0x01	; 1
 56a:	09 f0       	breq	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56c:	5e c0       	rjmp	.+188    	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
		{
			volt_temp = MeasureVolt();
 56e:	0e 94 3f 01 	call	0x27e	; 0x27e <MeasureVolt>
 572:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <volt_temp+0x1>
 576:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <volt_temp>
			if (volt_temp < 1250) 
 57a:	82 3e       	cpi	r24, 0xE2	; 226
 57c:	94 40       	sbci	r25, 0x04	; 4
 57e:	20 f4       	brcc	.+8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			{
				OCR2A++;
 580:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 584:	8f 5f       	subi	r24, 0xFF	; 255
 586:	03 c0       	rjmp	.+6      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
			}
			else
			{
				OCR2A--;
 588:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 58c:	81 50       	subi	r24, 0x01	; 1
 58e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			}
			PrintParam(4, 1, volt_temp);
 592:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <volt_temp>
 596:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <volt_temp+0x1>
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
			PrintDuty(OCR2A);
 5a2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 5a6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PrintDuty>
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	93 ed       	ldi	r25, 0xD3	; 211
 5ae:	20 e3       	ldi	r18, 0x30	; 48
 5b0:	81 50       	subi	r24, 0x01	; 1
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ba:	00 00       	nop
			MeasureAmp();
			_delay_ms(1000);
			PORTB &= ~(1 << 1);
 5bc:	29 98       	cbi	0x05, 1	; 5
 5be:	8f e3       	ldi	r24, 0x3F	; 63
 5c0:	9c e9       	ldi	r25, 0x9C	; 156
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c8:	00 00       	nop
			_delay_ms(10);
			volt_temp = MeasureVolt();
 5ca:	0e 94 3f 01 	call	0x27e	; 0x27e <MeasureVolt>
 5ce:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <volt_temp+0x1>
 5d2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <volt_temp>
			PrintParam(4, 2, volt_temp);
 5d6:	ac 01       	movw	r20, r24
 5d8:	62 e0       	ldi	r22, 0x02	; 2
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
			if ((amp_temp < 19) && (volt_temp > 1250)) 
 5e0:	40 91 5f 01 	lds	r20, 0x015F	; 0x80015f <amp_temp>
 5e4:	50 91 60 01 	lds	r21, 0x0160	; 0x800160 <amp_temp+0x1>
 5e8:	43 31       	cpi	r20, 0x13	; 19
 5ea:	51 05       	cpc	r21, r1
 5ec:	c8 f4       	brcc	.+50     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5ee:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <volt_temp>
 5f2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <volt_temp+0x1>
 5f6:	83 3e       	cpi	r24, 0xE3	; 227
 5f8:	94 40       	sbci	r25, 0x04	; 4
 5fa:	90 f0       	brcs	.+36     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
			{
				LcdClear();
 5fc:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
				LcdGotoxy(1, 1);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
				LcdPrint("Charge comlete");
 608:	8a e3       	ldi	r24, 0x3A	; 58
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
				cv_mode = 0;
 610:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <cv_mode>
				batt = 0;
 614:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <batt>
				li_ion = 0;
 618:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				PORTB |= (1 << 2);
 61c:	2a 9a       	sbi	0x05, 2	; 5
				break;
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
			}
			else
			{
				PrintParam(13, 2, amp_temp);
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	8d e0       	ldi	r24, 0x0D	; 13
 624:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
 628:	9c cf       	rjmp	.-200    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
				PORTB |= (1 << 1);
			}
		}
	}
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <Calibrate>:

void Calibrate(void)
{
	LcdClear();
 62e:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
	LcdGotoxy(1, 2);
 632:	62 e0       	ldi	r22, 0x02	; 2
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("cal mode");
 63a:	89 e4       	ldi	r24, 0x49	; 73
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	while (calib_mode) 
 642:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 646:	88 23       	and	r24, r24
 648:	31 f1       	breq	.+76     	; 0x696 <Calibrate+0x68>
	{
		volt_temp = MeasureVolt();
 64a:	0e 94 3f 01 	call	0x27e	; 0x27e <MeasureVolt>
 64e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <volt_temp+0x1>
 652:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <volt_temp>
		PrintParam(4, 1, volt_temp);
 656:	ac 01       	movw	r20, r24
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	84 e0       	ldi	r24, 0x04	; 4
 65c:	0e 94 95 01 	call	0x32a	; 0x32a <PrintParam>
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	81 ee       	ldi	r24, 0xE1	; 225
 664:	94 e0       	ldi	r25, 0x04	; 4
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <Calibrate+0x38>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <Calibrate+0x42>
 670:	00 00       	nop
		_delay_ms(100);
		if (SwPressed()) 
 672:	0e 94 22 01 	call	0x244	; 0x244 <SwPressed>
 676:	88 23       	and	r24, r24
 678:	21 f3       	breq	.-56     	; 0x642 <Calibrate+0x14>
		{
			LcdClear();
 67a:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
			PrintConst1();
 67e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintConst1>
 682:	2f ef       	ldi	r18, 0xFF	; 255
 684:	81 ee       	ldi	r24, 0xE1	; 225
 686:	94 e0       	ldi	r25, 0x04	; 4
 688:	21 50       	subi	r18, 0x01	; 1
 68a:	80 40       	sbci	r24, 0x00	; 0
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <Calibrate+0x5a>
 690:	00 c0       	rjmp	.+0      	; 0x692 <Calibrate+0x64>
 692:	00 00       	nop
 694:	d6 cf       	rjmp	.-84     	; 0x642 <Calibrate+0x14>
			_delay_ms(100);
		}
	}
}
 696:	08 95       	ret

00000698 <main>:

int main(void)
{
	SW_PIN &= ~(1 << PB4); /* make PB0 input */
 698:	1c 98       	cbi	0x03, 4	; 3
	SW_PORT |= (1 << PB4); /* pull up enable */
 69a:	2c 9a       	sbi	0x05, 4	; 5
	DDRB |= (1 << PB1) | (1 << PB2);//make PB1,PB2 output to drive "output" mosfet & buzzer
 69c:	84 b1       	in	r24, 0x04	; 4
 69e:	86 60       	ori	r24, 0x06	; 6
 6a0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << PB1) | (1 << PB2));//make it initially off i.e no buck output voltage to battery & buzzer off
 6a2:	85 b1       	in	r24, 0x05	; 5
 6a4:	89 7f       	andi	r24, 0xF9	; 249
 6a6:	85 b9       	out	0x05, r24	; 5
	ADC_Init();
 6a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <ADC_Init>
 6ac:	8f e9       	ldi	r24, 0x9F	; 159
 6ae:	9f e0       	ldi	r25, 0x0F	; 15
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <main+0x18>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x1e>
 6b6:	00 00       	nop
 6b8:	8f e9       	ldi	r24, 0x9F	; 159
 6ba:	9f e0       	ldi	r25, 0x0F	; 15
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <main+0x24>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x2a>
 6c2:	00 00       	nop
	_delay_ms(1);
	PWM_Init();
	_delay_ms(1);
	LcdInit();
 6c4:	0e 94 74 00 	call	0xe8	; 0xe8 <LcdInit>
 6c8:	8f e3       	ldi	r24, 0x3F	; 63
 6ca:	9c e9       	ldi	r25, 0x9C	; 156
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <main+0x34>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x3a>
 6d2:	00 00       	nop
	_delay_ms(10);
	/* OCR2 = 63; //(25% PWM output) */
	LcdGotoxy(1, 2);
 6d4:	62 e0       	ldi	r22, 0x02	; 2
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Hello");
 6dc:	82 e5       	ldi	r24, 0x52	; 82
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	while (1) 
	{
		if (SwPressed()) 
 6e4:	0e 94 22 01 	call	0x244	; 0x244 <SwPressed>
 6e8:	81 11       	cpse	r24, r1
		{
			Calibrate();
 6ea:	0e 94 17 03 	call	0x62e	; 0x62e <Calibrate>
		}
		if (li_ion) 
 6ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6f2:	88 23       	and	r24, r24
 6f4:	b9 f3       	breq	.-18     	; 0x6e4 <main+0x4c>
		{
			ChargeLiIon();
 6f6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ChargeLiIon>
 6fa:	f4 cf       	rjmp	.-24     	; 0x6e4 <main+0x4c>

000006fc <ADC_Init>:

#include "adc.h"

void ADC_Init(void)
{
	DDRC = 0x00;          /* make adc port input */
 6fc:	17 b8       	out	0x07, r1	; 7
	ADCSRA |=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled,clk/128 frequency
 6fe:	ea e7       	ldi	r30, 0x7A	; 122
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	87 68       	ori	r24, 0x87	; 135
 706:	80 83       	st	Z, r24
 708:	08 95       	ret

0000070a <ADC_ReadRaw>:
}

uint16_t ADC_ReadRaw(uint8_t ch)
{
	ch = ch & 0x07;
 70a:	87 70       	andi	r24, 0x07	; 7
	ADMUX = ADCREF_AREF | ch;
 70c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1 << ADSC); /* adc start conversion */
 710:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 714:	80 64       	ori	r24, 0x40	; 64
 716:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while((ADCSRA & (1 << ADIF)) == 0); /* stay until ADIF becomes 1 to indicate finish conversion */
 71a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 71e:	84 ff       	sbrs	r24, 4
 720:	fc cf       	rjmp	.-8      	; 0x71a <ADC_ReadRaw+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 722:	85 e0       	ldi	r24, 0x05	; 5
 724:	8a 95       	dec	r24
 726:	f1 f7       	brne	.-4      	; 0x724 <ADC_ReadRaw+0x1a>
 728:	00 00       	nop
	_delay_us(1);
	return(ADC);          /* return ADCH + ADCL  */
 72a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 72e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 732:	08 95       	ret

00000734 <ADC_ReadAvg>:

uint16_t ADC_ReadAvg(uint8_t ch, uint16_t sample)
{
 734:	4f 92       	push	r4
 736:	5f 92       	push	r5
 738:	6f 92       	push	r6
 73a:	7f 92       	push	r7
 73c:	8f 92       	push	r8
 73e:	9f 92       	push	r9
 740:	af 92       	push	r10
 742:	bf 92       	push	r11
 744:	cf 92       	push	r12
 746:	df 92       	push	r13
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	88 2e       	mov	r8, r24
 75a:	7b 01       	movw	r14, r22
		sum += r[i];
		_delay_ms(1);
	}
	avg = sum/sample;
	return avg;
}
 75c:	cd b6       	in	r12, 0x3d	; 61
 75e:	de b6       	in	r13, 0x3e	; 62
}

uint16_t ADC_ReadAvg(uint8_t ch, uint16_t sample)
{
	unsigned char i;
	unsigned int r[sample];//to store multiple reading.No of samples is defined by the user as per criteria
 760:	cb 01       	movw	r24, r22
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	2d b7       	in	r18, 0x3d	; 61
 768:	3e b7       	in	r19, 0x3e	; 62
 76a:	28 1b       	sub	r18, r24
 76c:	39 0b       	sbc	r19, r25
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	3e bf       	out	0x3e, r19	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	2d bf       	out	0x3d, r18	; 61
 778:	8d b7       	in	r24, 0x3d	; 61
 77a:	9e b7       	in	r25, 0x3e	; 62
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	5c 01       	movw	r10, r24
	unsigned int avg;//to store the average result
	unsigned long int sum = 0;//to store the sums of the readings and must be initialized as 0 to prevent errors
 780:	41 2c       	mov	r4, r1
 782:	51 2c       	mov	r5, r1
 784:	32 01       	movw	r6, r4
	for (i = 0; i < sample; i++) {
 786:	91 2c       	mov	r9, r1
 788:	09 2d       	mov	r16, r9
 78a:	10 e0       	ldi	r17, 0x00	; 0
 78c:	0e 15       	cp	r16, r14
 78e:	1f 05       	cpc	r17, r15
 790:	b0 f4       	brcc	.+44     	; 0x7be <ADC_ReadAvg+0x8a>
		r[i] = ADC_ReadRaw(ch);
 792:	88 2d       	mov	r24, r8
 794:	0e 94 85 03 	call	0x70a	; 0x70a <ADC_ReadRaw>
 798:	00 0f       	add	r16, r16
 79a:	11 1f       	adc	r17, r17
 79c:	f5 01       	movw	r30, r10
 79e:	e0 0f       	add	r30, r16
 7a0:	f1 1f       	adc	r31, r17
 7a2:	91 83       	std	Z+1, r25	; 0x01
 7a4:	80 83       	st	Z, r24
		sum += r[i];
 7a6:	48 0e       	add	r4, r24
 7a8:	59 1e       	adc	r5, r25
 7aa:	61 1c       	adc	r6, r1
 7ac:	71 1c       	adc	r7, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7ae:	8f e9       	ldi	r24, 0x9F	; 159
 7b0:	9f e0       	ldi	r25, 0x0F	; 15
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <ADC_ReadAvg+0x7e>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <ADC_ReadAvg+0x84>
 7b8:	00 00       	nop
{
	unsigned char i;
	unsigned int r[sample];//to store multiple reading.No of samples is defined by the user as per criteria
	unsigned int avg;//to store the average result
	unsigned long int sum = 0;//to store the sums of the readings and must be initialized as 0 to prevent errors
	for (i = 0; i < sample; i++) {
 7ba:	93 94       	inc	r9
 7bc:	e5 cf       	rjmp	.-54     	; 0x788 <ADC_ReadAvg+0x54>
		r[i] = ADC_ReadRaw(ch);
		sum += r[i];
		_delay_ms(1);
	}
	avg = sum/sample;
	return avg;
 7be:	97 01       	movw	r18, r14
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	c3 01       	movw	r24, r6
 7c6:	b2 01       	movw	r22, r4
 7c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodsi4>
}
 7cc:	c9 01       	movw	r24, r18
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de be       	out	0x3e, r13	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd be       	out	0x3d, r12	; 61
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
 7e8:	bf 90       	pop	r11
 7ea:	af 90       	pop	r10
 7ec:	9f 90       	pop	r9
 7ee:	8f 90       	pop	r8
 7f0:	7f 90       	pop	r7
 7f2:	6f 90       	pop	r6
 7f4:	5f 90       	pop	r5
 7f6:	4f 90       	pop	r4
 7f8:	08 95       	ret

000007fa <__udivmodqi4>:
 7fa:	99 1b       	sub	r25, r25
 7fc:	79 e0       	ldi	r23, 0x09	; 9
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <__udivmodqi4_ep>

00000800 <__udivmodqi4_loop>:
 800:	99 1f       	adc	r25, r25
 802:	96 17       	cp	r25, r22
 804:	08 f0       	brcs	.+2      	; 0x808 <__udivmodqi4_ep>
 806:	96 1b       	sub	r25, r22

00000808 <__udivmodqi4_ep>:
 808:	88 1f       	adc	r24, r24
 80a:	7a 95       	dec	r23
 80c:	c9 f7       	brne	.-14     	; 0x800 <__udivmodqi4_loop>
 80e:	80 95       	com	r24
 810:	08 95       	ret

00000812 <__udivmodhi4>:
 812:	aa 1b       	sub	r26, r26
 814:	bb 1b       	sub	r27, r27
 816:	51 e1       	ldi	r21, 0x11	; 17
 818:	07 c0       	rjmp	.+14     	; 0x828 <__udivmodhi4_ep>

0000081a <__udivmodhi4_loop>:
 81a:	aa 1f       	adc	r26, r26
 81c:	bb 1f       	adc	r27, r27
 81e:	a6 17       	cp	r26, r22
 820:	b7 07       	cpc	r27, r23
 822:	10 f0       	brcs	.+4      	; 0x828 <__udivmodhi4_ep>
 824:	a6 1b       	sub	r26, r22
 826:	b7 0b       	sbc	r27, r23

00000828 <__udivmodhi4_ep>:
 828:	88 1f       	adc	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	5a 95       	dec	r21
 82e:	a9 f7       	brne	.-22     	; 0x81a <__udivmodhi4_loop>
 830:	80 95       	com	r24
 832:	90 95       	com	r25
 834:	bc 01       	movw	r22, r24
 836:	cd 01       	movw	r24, r26
 838:	08 95       	ret

0000083a <__udivmodsi4>:
 83a:	a1 e2       	ldi	r26, 0x21	; 33
 83c:	1a 2e       	mov	r1, r26
 83e:	aa 1b       	sub	r26, r26
 840:	bb 1b       	sub	r27, r27
 842:	fd 01       	movw	r30, r26
 844:	0d c0       	rjmp	.+26     	; 0x860 <__udivmodsi4_ep>

00000846 <__udivmodsi4_loop>:
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	ee 1f       	adc	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	a2 17       	cp	r26, r18
 850:	b3 07       	cpc	r27, r19
 852:	e4 07       	cpc	r30, r20
 854:	f5 07       	cpc	r31, r21
 856:	20 f0       	brcs	.+8      	; 0x860 <__udivmodsi4_ep>
 858:	a2 1b       	sub	r26, r18
 85a:	b3 0b       	sbc	r27, r19
 85c:	e4 0b       	sbc	r30, r20
 85e:	f5 0b       	sbc	r31, r21

00000860 <__udivmodsi4_ep>:
 860:	66 1f       	adc	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	1a 94       	dec	r1
 86a:	69 f7       	brne	.-38     	; 0x846 <__udivmodsi4_loop>
 86c:	60 95       	com	r22
 86e:	70 95       	com	r23
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	9b 01       	movw	r18, r22
 876:	ac 01       	movw	r20, r24
 878:	bd 01       	movw	r22, r26
 87a:	cf 01       	movw	r24, r30
 87c:	08 95       	ret

0000087e <__fixunssfsi>:
 87e:	0e 94 b3 04 	call	0x966	; 0x966 <__fp_splitA>
 882:	88 f0       	brcs	.+34     	; 0x8a6 <__fixunssfsi+0x28>
 884:	9f 57       	subi	r25, 0x7F	; 127
 886:	98 f0       	brcs	.+38     	; 0x8ae <__fixunssfsi+0x30>
 888:	b9 2f       	mov	r27, r25
 88a:	99 27       	eor	r25, r25
 88c:	b7 51       	subi	r27, 0x17	; 23
 88e:	b0 f0       	brcs	.+44     	; 0x8bc <__fixunssfsi+0x3e>
 890:	e1 f0       	breq	.+56     	; 0x8ca <__fixunssfsi+0x4c>
 892:	66 0f       	add	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	1a f0       	brmi	.+6      	; 0x8a2 <__fixunssfsi+0x24>
 89c:	ba 95       	dec	r27
 89e:	c9 f7       	brne	.-14     	; 0x892 <__fixunssfsi+0x14>
 8a0:	14 c0       	rjmp	.+40     	; 0x8ca <__fixunssfsi+0x4c>
 8a2:	b1 30       	cpi	r27, 0x01	; 1
 8a4:	91 f0       	breq	.+36     	; 0x8ca <__fixunssfsi+0x4c>
 8a6:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_zero>
 8aa:	b1 e0       	ldi	r27, 0x01	; 1
 8ac:	08 95       	ret
 8ae:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_zero>
 8b2:	67 2f       	mov	r22, r23
 8b4:	78 2f       	mov	r23, r24
 8b6:	88 27       	eor	r24, r24
 8b8:	b8 5f       	subi	r27, 0xF8	; 248
 8ba:	39 f0       	breq	.+14     	; 0x8ca <__fixunssfsi+0x4c>
 8bc:	b9 3f       	cpi	r27, 0xF9	; 249
 8be:	cc f3       	brlt	.-14     	; 0x8b2 <__fixunssfsi+0x34>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b3 95       	inc	r27
 8c8:	d9 f7       	brne	.-10     	; 0x8c0 <__fixunssfsi+0x42>
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__fixunssfsi+0x5c>
 8cc:	90 95       	com	r25
 8ce:	80 95       	com	r24
 8d0:	70 95       	com	r23
 8d2:	61 95       	neg	r22
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	8f 4f       	sbci	r24, 0xFF	; 255
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	08 95       	ret

000008dc <__floatunsisf>:
 8dc:	e8 94       	clt
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <__floatsisf+0x12>

000008e0 <__floatsisf>:
 8e0:	97 fb       	bst	r25, 7
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <__floatsisf+0x12>
 8e4:	90 95       	com	r25
 8e6:	80 95       	com	r24
 8e8:	70 95       	com	r23
 8ea:	61 95       	neg	r22
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	99 23       	and	r25, r25
 8f4:	a9 f0       	breq	.+42     	; 0x920 <__stack+0x21>
 8f6:	f9 2f       	mov	r31, r25
 8f8:	96 e9       	ldi	r25, 0x96	; 150
 8fa:	bb 27       	eor	r27, r27
 8fc:	93 95       	inc	r25
 8fe:	f6 95       	lsr	r31
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	b7 95       	ror	r27
 908:	f1 11       	cpse	r31, r1
 90a:	f8 cf       	rjmp	.-16     	; 0x8fc <__floatsisf+0x1c>
 90c:	fa f4       	brpl	.+62     	; 0x94c <__stack+0x4d>
 90e:	bb 0f       	add	r27, r27
 910:	11 f4       	brne	.+4      	; 0x916 <__stack+0x17>
 912:	60 ff       	sbrs	r22, 0
 914:	1b c0       	rjmp	.+54     	; 0x94c <__stack+0x4d>
 916:	6f 5f       	subi	r22, 0xFF	; 255
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	16 c0       	rjmp	.+44     	; 0x94c <__stack+0x4d>
 920:	88 23       	and	r24, r24
 922:	11 f0       	breq	.+4      	; 0x928 <__stack+0x29>
 924:	96 e9       	ldi	r25, 0x96	; 150
 926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
 928:	77 23       	and	r23, r23
 92a:	21 f0       	breq	.+8      	; 0x934 <__stack+0x35>
 92c:	9e e8       	ldi	r25, 0x8E	; 142
 92e:	87 2f       	mov	r24, r23
 930:	76 2f       	mov	r23, r22
 932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
 934:	66 23       	and	r22, r22
 936:	71 f0       	breq	.+28     	; 0x954 <__stack+0x55>
 938:	96 e8       	ldi	r25, 0x86	; 134
 93a:	86 2f       	mov	r24, r22
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	2a f0       	brmi	.+10     	; 0x94c <__stack+0x4d>
 942:	9a 95       	dec	r25
 944:	66 0f       	add	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	da f7       	brpl	.-10     	; 0x942 <__stack+0x43>
 94c:	88 0f       	add	r24, r24
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret

00000956 <__fp_split3>:
 956:	57 fd       	sbrc	r21, 7
 958:	90 58       	subi	r25, 0x80	; 128
 95a:	44 0f       	add	r20, r20
 95c:	55 1f       	adc	r21, r21
 95e:	59 f0       	breq	.+22     	; 0x976 <__fp_splitA+0x10>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	71 f0       	breq	.+28     	; 0x980 <__fp_splitA+0x1a>
 964:	47 95       	ror	r20

00000966 <__fp_splitA>:
 966:	88 0f       	add	r24, r24
 968:	97 fb       	bst	r25, 7
 96a:	99 1f       	adc	r25, r25
 96c:	61 f0       	breq	.+24     	; 0x986 <__fp_splitA+0x20>
 96e:	9f 3f       	cpi	r25, 0xFF	; 255
 970:	79 f0       	breq	.+30     	; 0x990 <__fp_splitA+0x2a>
 972:	87 95       	ror	r24
 974:	08 95       	ret
 976:	12 16       	cp	r1, r18
 978:	13 06       	cpc	r1, r19
 97a:	14 06       	cpc	r1, r20
 97c:	55 1f       	adc	r21, r21
 97e:	f2 cf       	rjmp	.-28     	; 0x964 <__fp_split3+0xe>
 980:	46 95       	lsr	r20
 982:	f1 df       	rcall	.-30     	; 0x966 <__fp_splitA>
 984:	08 c0       	rjmp	.+16     	; 0x996 <__fp_splitA+0x30>
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	18 06       	cpc	r1, r24
 98c:	99 1f       	adc	r25, r25
 98e:	f1 cf       	rjmp	.-30     	; 0x972 <__fp_splitA+0xc>
 990:	86 95       	lsr	r24
 992:	71 05       	cpc	r23, r1
 994:	61 05       	cpc	r22, r1
 996:	08 94       	sec
 998:	08 95       	ret

0000099a <__fp_zero>:
 99a:	e8 94       	clt

0000099c <__fp_szero>:
 99c:	bb 27       	eor	r27, r27
 99e:	66 27       	eor	r22, r22
 9a0:	77 27       	eor	r23, r23
 9a2:	cb 01       	movw	r24, r22
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret

000009a8 <__mulsf3>:
 9a8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__mulsf3x>
 9ac:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_round>
 9b0:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_pscA>
 9b4:	38 f0       	brcs	.+14     	; 0x9c4 <__mulsf3+0x1c>
 9b6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__fp_pscB>
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__mulsf3+0x1c>
 9bc:	95 23       	and	r25, r21
 9be:	11 f0       	breq	.+4      	; 0x9c4 <__mulsf3+0x1c>
 9c0:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 9c4:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_nan>
 9c8:	11 24       	eor	r1, r1
 9ca:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_szero>

000009ce <__mulsf3x>:
 9ce:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_split3>
 9d2:	70 f3       	brcs	.-36     	; 0x9b0 <__mulsf3+0x8>

000009d4 <__mulsf3_pse>:
 9d4:	95 9f       	mul	r25, r21
 9d6:	c1 f3       	breq	.-16     	; 0x9c8 <__mulsf3+0x20>
 9d8:	95 0f       	add	r25, r21
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	55 1f       	adc	r21, r21
 9de:	62 9f       	mul	r22, r18
 9e0:	f0 01       	movw	r30, r0
 9e2:	72 9f       	mul	r23, r18
 9e4:	bb 27       	eor	r27, r27
 9e6:	f0 0d       	add	r31, r0
 9e8:	b1 1d       	adc	r27, r1
 9ea:	63 9f       	mul	r22, r19
 9ec:	aa 27       	eor	r26, r26
 9ee:	f0 0d       	add	r31, r0
 9f0:	b1 1d       	adc	r27, r1
 9f2:	aa 1f       	adc	r26, r26
 9f4:	64 9f       	mul	r22, r20
 9f6:	66 27       	eor	r22, r22
 9f8:	b0 0d       	add	r27, r0
 9fa:	a1 1d       	adc	r26, r1
 9fc:	66 1f       	adc	r22, r22
 9fe:	82 9f       	mul	r24, r18
 a00:	22 27       	eor	r18, r18
 a02:	b0 0d       	add	r27, r0
 a04:	a1 1d       	adc	r26, r1
 a06:	62 1f       	adc	r22, r18
 a08:	73 9f       	mul	r23, r19
 a0a:	b0 0d       	add	r27, r0
 a0c:	a1 1d       	adc	r26, r1
 a0e:	62 1f       	adc	r22, r18
 a10:	83 9f       	mul	r24, r19
 a12:	a0 0d       	add	r26, r0
 a14:	61 1d       	adc	r22, r1
 a16:	22 1f       	adc	r18, r18
 a18:	74 9f       	mul	r23, r20
 a1a:	33 27       	eor	r19, r19
 a1c:	a0 0d       	add	r26, r0
 a1e:	61 1d       	adc	r22, r1
 a20:	23 1f       	adc	r18, r19
 a22:	84 9f       	mul	r24, r20
 a24:	60 0d       	add	r22, r0
 a26:	21 1d       	adc	r18, r1
 a28:	82 2f       	mov	r24, r18
 a2a:	76 2f       	mov	r23, r22
 a2c:	6a 2f       	mov	r22, r26
 a2e:	11 24       	eor	r1, r1
 a30:	9f 57       	subi	r25, 0x7F	; 127
 a32:	50 40       	sbci	r21, 0x00	; 0
 a34:	9a f0       	brmi	.+38     	; 0xa5c <__mulsf3_pse+0x88>
 a36:	f1 f0       	breq	.+60     	; 0xa74 <__mulsf3_pse+0xa0>
 a38:	88 23       	and	r24, r24
 a3a:	4a f0       	brmi	.+18     	; 0xa4e <__mulsf3_pse+0x7a>
 a3c:	ee 0f       	add	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	bb 1f       	adc	r27, r27
 a42:	66 1f       	adc	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	91 50       	subi	r25, 0x01	; 1
 a4a:	50 40       	sbci	r21, 0x00	; 0
 a4c:	a9 f7       	brne	.-22     	; 0xa38 <__mulsf3_pse+0x64>
 a4e:	9e 3f       	cpi	r25, 0xFE	; 254
 a50:	51 05       	cpc	r21, r1
 a52:	80 f0       	brcs	.+32     	; 0xa74 <__mulsf3_pse+0xa0>
 a54:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_inf>
 a58:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_szero>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	e4 f3       	brlt	.-8      	; 0xa58 <__mulsf3_pse+0x84>
 a60:	98 3e       	cpi	r25, 0xE8	; 232
 a62:	d4 f3       	brlt	.-12     	; 0xa58 <__mulsf3_pse+0x84>
 a64:	86 95       	lsr	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b7 95       	ror	r27
 a6c:	f7 95       	ror	r31
 a6e:	e7 95       	ror	r30
 a70:	9f 5f       	subi	r25, 0xFF	; 255
 a72:	c1 f7       	brne	.-16     	; 0xa64 <__mulsf3_pse+0x90>
 a74:	fe 2b       	or	r31, r30
 a76:	88 0f       	add	r24, r24
 a78:	91 1d       	adc	r25, r1
 a7a:	96 95       	lsr	r25
 a7c:	87 95       	ror	r24
 a7e:	97 f9       	bld	r25, 7
 a80:	08 95       	ret

00000a82 <__fp_inf>:
 a82:	97 f9       	bld	r25, 7
 a84:	9f 67       	ori	r25, 0x7F	; 127
 a86:	80 e8       	ldi	r24, 0x80	; 128
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	08 95       	ret

00000a8e <__fp_nan>:
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	80 ec       	ldi	r24, 0xC0	; 192
 a92:	08 95       	ret

00000a94 <__fp_pscA>:
 a94:	00 24       	eor	r0, r0
 a96:	0a 94       	dec	r0
 a98:	16 16       	cp	r1, r22
 a9a:	17 06       	cpc	r1, r23
 a9c:	18 06       	cpc	r1, r24
 a9e:	09 06       	cpc	r0, r25
 aa0:	08 95       	ret

00000aa2 <__fp_pscB>:
 aa2:	00 24       	eor	r0, r0
 aa4:	0a 94       	dec	r0
 aa6:	12 16       	cp	r1, r18
 aa8:	13 06       	cpc	r1, r19
 aaa:	14 06       	cpc	r1, r20
 aac:	05 06       	cpc	r0, r21
 aae:	08 95       	ret

00000ab0 <__fp_round>:
 ab0:	09 2e       	mov	r0, r25
 ab2:	03 94       	inc	r0
 ab4:	00 0c       	add	r0, r0
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0xc>
 ab8:	88 23       	and	r24, r24
 aba:	52 f0       	brmi	.+20     	; 0xad0 <__fp_round+0x20>
 abc:	bb 0f       	add	r27, r27
 abe:	40 f4       	brcc	.+16     	; 0xad0 <__fp_round+0x20>
 ac0:	bf 2b       	or	r27, r31
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__fp_round+0x18>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__fp_round+0x20>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	08 95       	ret

00000ad2 <_exit>:
 ad2:	f8 94       	cli

00000ad4 <__stop_program>:
 ad4:	ff cf       	rjmp	.-2      	; 0xad4 <__stop_program>
