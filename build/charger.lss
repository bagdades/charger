
build/charger.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ce  00800060  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080022e  0080022e  0000060c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c2  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d4  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a4  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000799  00000000  00000000  00002aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 32       	cpi	r26, 0x2E	; 46
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ae e2       	ldi	r26, 0x2E	; 46
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
#include "lcd_8544.h"

int main(void)
{
	DDRA |= (1 << 0);
  92:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << 0);
  94:	d8 98       	cbi	0x1b, 0	; 27
	LcdInit();
  96:	0e 94 b0 01 	call	0x360	; 0x360 <LcdInit>
	LcdGotoXY(LCD_CHAR, 0, 0);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
	LcdStr(LCD_MODE_NORM, 0, 0, (uint8_t*)"Hello!");
  a4:	20 e6       	ldi	r18, 0x60	; 96
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 43 01 	call	0x286	; 0x286 <LcdStr>
	LcdGotoXY(LCD_CHAR, 0, 1);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
	LcdStr(LCD_MODE_NORM, 0, 0, (uint8_t*)"Hello!");
  bc:	20 e6       	ldi	r18, 0x60	; 96
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 43 01 	call	0x286	; 0x286 <LcdStr>
	LcdGotoXY(LCD_CHAR, 0, 2);
  ca:	42 e0       	ldi	r20, 0x02	; 2
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
	LcdStr(LCD_MODE_NORM, 0, 0, (uint8_t*)"Hello!");
  d4:	20 e6       	ldi	r18, 0x60	; 96
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 43 01 	call	0x286	; 0x286 <LcdStr>
	LcdGotoXY(LCD_CHAR, 0, 3);
  e2:	43 e0       	ldi	r20, 0x03	; 3
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
	LcdStr(LCD_MODE_NORM, 0, 0, (uint8_t*)"Hello!");
  ec:	20 e6       	ldi	r18, 0x60	; 96
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 43 01 	call	0x286	; 0x286 <LcdStr>
	LcdGotoXY(LCD_CHAR, 0, 4);
  fa:	44 e0       	ldi	r20, 0x04	; 4
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
	LcdStr(LCD_MODE_NORM, 0, 0, (uint8_t*)"Hello!");
 104:	20 e6       	ldi	r18, 0x60	; 96
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 43 01 	call	0x286	; 0x286 <LcdStr>
	while (1) 
	{
		PORTA |= (1 << 0);
 112:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	84 e3       	ldi	r24, 0x34	; 52
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x88>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x92>
 124:	00 00       	nop
		_delay_ms(500);
		PORTA &= ~(1 << 0);
 126:	d8 98       	cbi	0x1b, 0	; 27
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	9c e0       	ldi	r25, 0x0C	; 12
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x9c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xa6>
 138:	00 00       	nop
 13a:	eb cf       	rjmp	.-42     	; 0x112 <main+0x80>

0000013c <LcdSend>:
void LcdSend(uint8_t data, LcdCmdData cd){
#ifndef SPI_MODE
	 int bitcnt;
#endif
   /*  Enable display controller (active low). */
   LCD_PORT &= ~(1 << LCD_CE_PIN);
 13c:	c3 98       	cbi	0x18, 3	; 24
   if ( cd == LCD_DATA )
 13e:	61 30       	cpi	r22, 0x01	; 1
 140:	11 f4       	brne	.+4      	; 0x146 <LcdSend+0xa>
   {
	   LCD_PORT |= (1 << LCD_DC_PIN);
 142:	c2 9a       	sbi	0x18, 2	; 24
 144:	01 c0       	rjmp	.+2      	; 0x148 <LcdSend+0xc>
   }
   else
   {
	   LCD_PORT &= ~(1 << LCD_DC_PIN);
 146:	c2 98       	cbi	0x18, 2	; 24
   }
#ifdef SPI_MODE
   SPDR = data;
 148:	8f b9       	out	0x0f, r24	; 15
   while(!(SPSR & (1 << SPIF)));
 14a:	77 9b       	sbis	0x0e, 7	; 14
 14c:	fe cf       	rjmp	.-4      	; 0x14a <LcdSend+0xe>
			LCD_PORT |= (1 << LCD_CLK_PIN); // Data is clocked on the rising edge of SCK.
			data = data << 1;						// Logical shift data by 1 bit left.
		}
#endif
   /* Disable display controller. */
   LCD_PORT |= (1 << LCD_CE_PIN);
 14e:	c3 9a       	sbi	0x18, 3	; 24
 150:	08 95       	ret

00000152 <LcdGotoXY>:
 * Name			: LcdGotoXY
 * Description	: Set cursor location to xy location
 * Argument (s)	: x,y-> Coordinate for new cursor position . Range :0,0 ... 13,5
 * Return value	: see return value in lcd_8544.
 */
uint8_t LcdGotoXY(LcdPixelChar mode ,uint8_t x,uint8_t y){
 152:	cf 93       	push	r28
 154:	96 2f       	mov	r25, r22
 156:	c4 2f       	mov	r28, r20
	if(mode == LCD_CHAR)
 158:	81 11       	cpse	r24, r1
 15a:	04 c0       	rjmp	.+8      	; 0x164 <LcdGotoXY+0x12>
		x *= 6;
 15c:	86 2f       	mov	r24, r22
 15e:	88 0f       	add	r24, r24
 160:	98 0f       	add	r25, r24
 162:	99 0f       	add	r25, r25
	x_pos = x;
 164:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <__data_end>
	y_pos = y;
 168:	c0 93 2f 02 	sts	0x022F, r28	; 0x80022f <y_pos>
    if( x > LCD_X_RES)
 16c:	95 35       	cpi	r25, 0x55	; 85
 16e:	70 f4       	brcc	.+28     	; 0x18c <LcdGotoXY+0x3a>
        return OUT_OF_BORDER;
    if( y > LCD_Y_MAX)
 170:	c6 30       	cpi	r28, 0x06	; 6
 172:	60 f4       	brcc	.+24     	; 0x18c <LcdGotoXY+0x3a>
        return OUT_OF_BORDER;
    LcdSend(0x80 | x,LCD_CMD);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	89 2f       	mov	r24, r25
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend(0x40 | y,LCD_CMD);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8c 2f       	mov	r24, r28
 182:	80 64       	ori	r24, 0x40	; 64
 184:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    return OK;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	01 c0       	rjmp	.+2      	; 0x18e <LcdGotoXY+0x3c>
	if(mode == LCD_CHAR)
		x *= 6;
	x_pos = x;
	y_pos = y;
    if( x > LCD_X_RES)
        return OUT_OF_BORDER;
 18c:	81 e0       	ldi	r24, 0x01	; 1
        return OUT_OF_BORDER;
    LcdSend(0x80 | x,LCD_CMD);
    LcdSend(0x40 | y,LCD_CMD);
    return OK;

}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LcdClear>:
 * Name         :  LcdClear
 * Description  :  Clear display
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdClear(void){
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	uint16_t i;
	LcdGotoXY(LCD_CHAR,0,0);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 a9 00 	call	0x152	; 0x152 <LcdGotoXY>
 1a0:	c8 ef       	ldi	r28, 0xF8	; 248
 1a2:	d1 e0       	ldi	r29, 0x01	; 1
	for (i = 0; i < LCD_SIZE; ++i) {
		LcdSend(0x00,LCD_DATA);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
 1ac:	21 97       	sbiw	r28, 0x01	; 1
 * Return value :  None.
 */
void LcdClear(void){
	uint16_t i;
	LcdGotoXY(LCD_CHAR,0,0);
	for (i = 0; i < LCD_SIZE; ++i) {
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <LcdClear+0x12>
		LcdSend(0x00,LCD_DATA);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <LcdChr>:
 * Argument(s)  :  size -> Font size. See enum in pcd8544.h.
 * 				   mode -> Mode inverse or normal. See enum in lcd8544.h
 *                 ch   -> Character to write.
 * Return value :  see lcd8544.h about return value
 */
uint8_t LcdChr ( LcdMode mode, uint8_t ch ){
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
 1c2:	06 2f       	mov	r16, r22
	uint8_t temp;
	uint8_t i;

    if ( (ch < 0x20) || (ch > 0xFF) )
 1c4:	60 32       	cpi	r22, 0x20	; 32
 1c6:	08 f4       	brcc	.+2      	; 0x1ca <LcdChr+0x14>
    {
        /* Convert to a printable character. */
        ch = 92;
 1c8:	0c e5       	ldi	r16, 0x5C	; 92
    }
    if(mode == LCD_MODE_INVERSE){
 1ca:	c1 30       	cpi	r28, 0x01	; 1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <LcdChr+0x20>
    	LcdSend(0xFF,LCD_DATA);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	08 9f       	mul	r16, r24
 1da:	80 01       	movw	r16, r0
 1dc:	11 24       	eor	r1, r1
	uint8_t i;

    if ( (ch < 0x20) || (ch > 0xFF) )
    {
        /* Convert to a printable character. */
        ch = 92;
 1de:	e1 2c       	mov	r14, r1
 1e0:	f1 2c       	mov	r15, r1
 1e2:	f8 01       	movw	r30, r16
 1e4:	ee 0d       	add	r30, r14
 1e6:	ff 1d       	adc	r31, r15
    	LcdSend(0xFF,LCD_DATA);
    }
        for ( i = 0; i < 5; i++ )
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            temp = ( FontLookup[ ch - 32 ][ i ] ) << 1;
 1e8:	e9 53       	subi	r30, 0x39	; 57
 1ea:	f0 40       	sbci	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 0f       	add	r24, r24
            if(mode == LCD_MODE_NORM)
 1f0:	c1 11       	cpse	r28, r1
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <LcdChr+0x42>
            LcdSend(temp,LCD_DATA);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <LcdChr+0x4a>
            else if(mode == LCD_MODE_INVERSE)
 1f8:	c1 30       	cpi	r28, 0x01	; 1
 1fa:	21 f4       	brne	.+8      	; 0x204 <LcdChr+0x4e>
            	LcdSend(temp ^ 0xFF,LCD_DATA);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 95       	com	r24
 200:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	e8 1a       	sub	r14, r24
 208:	f8 0a       	sbc	r15, r24
        ch = 92;
    }
    if(mode == LCD_MODE_INVERSE){
    	LcdSend(0xFF,LCD_DATA);
    }
        for ( i = 0; i < 5; i++ )
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	e8 16       	cp	r14, r24
 20e:	f1 04       	cpc	r15, r1
 210:	41 f7       	brne	.-48     	; 0x1e2 <LcdChr+0x2c>
            if(mode == LCD_MODE_NORM)
            LcdSend(temp,LCD_DATA);
            else if(mode == LCD_MODE_INVERSE)
            	LcdSend(temp ^ 0xFF,LCD_DATA);
        }
    if(mode == LCD_MODE_NORM)
 212:	c1 11       	cpse	r28, r1
 214:	03 c0       	rjmp	.+6      	; 0x21c <LcdChr+0x66>
     LcdSend(0x00,LCD_DATA);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	04 c0       	rjmp	.+8      	; 0x224 <LcdChr+0x6e>
     else if(mode == LCD_MODE_INVERSE)
 21c:	c1 30       	cpi	r28, 0x01	; 1
 21e:	21 f4       	brne	.+8      	; 0x228 <LcdChr+0x72>
     	LcdSend(0xFF,LCD_DATA);//пїЅпїЅпїЅпїЅпїЅпїЅпїЅ пїЅпїЅ пїЅпїЅпїЅпїЅпїЅпїЅпїЅ
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    return OK;
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <LcdFStr>:
 *                 endInverse -> number of charester
 *                 data -> Pointer of string of char to be written
 * Return value :  count charester
 */
uint8_t LcdFStr (LcdMode mode,uint8_t startInverse,uint8_t endInverse, char* data )
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	d8 2f       	mov	r29, r24
 244:	f6 2e       	mov	r15, r22
 246:	e4 2e       	mov	r14, r20
 248:	89 01       	movw	r16, r18
	uint8_t out_mode;
	uint8_t ch = 1;
 24a:	c1 e0       	ldi	r28, 0x01	; 1
    while( *data != '\0' )
 24c:	f8 01       	movw	r30, r16
 24e:	61 91       	ld	r22, Z+
 250:	8f 01       	movw	r16, r30
 252:	66 23       	and	r22, r22
 254:	79 f0       	breq	.+30     	; 0x274 <LcdFStr+0x3e>
	{
    	if(mode == LCD_MODE_NORM || mode == LCD_MODE_INVERSE)
 256:	d2 30       	cpi	r29, 0x02	; 2
 258:	30 f0       	brcs	.+12     	; 0x266 <LcdFStr+0x30>
    		out_mode = mode;
    	else if(ch >= startInverse && ch <= endInverse)
 25a:	cf 15       	cp	r28, r15
 25c:	30 f0       	brcs	.+12     	; 0x26a <LcdFStr+0x34>
    		out_mode = LCD_MODE_INVERSE;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	ec 16       	cp	r14, r28
 262:	20 f4       	brcc	.+8      	; 0x26c <LcdFStr+0x36>
 264:	02 c0       	rjmp	.+4      	; 0x26a <LcdFStr+0x34>
 266:	8d 2f       	mov	r24, r29
 268:	01 c0       	rjmp	.+2      	; 0x26c <LcdFStr+0x36>
    	else out_mode = LCD_MODE_NORM;
 26a:	80 e0       	ldi	r24, 0x00	; 0
		LcdChr(out_mode, *data);
 26c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LcdChr>
		data++;
		ch++;
 270:	cf 5f       	subi	r28, 0xFF	; 255
 272:	ec cf       	rjmp	.-40     	; 0x24c <LcdFStr+0x16>
	}
    return ch -= 1;
}
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	8c 0f       	add	r24, r28
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	08 95       	ret

00000286 <LcdStr>:
 *                 startInverse -> number of charester
 *                 endInverse -> number of charester
 *                 data -> Pointer of string of char to be written
 * Return value :  count charester
 */
uint8_t LcdStr(LcdMode mode,uint8_t startInverse,uint8_t endInverse, uint8_t* data ){
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	d8 2f       	mov	r29, r24
 294:	f6 2e       	mov	r15, r22
 296:	e4 2e       	mov	r14, r20
 298:	89 01       	movw	r16, r18
	uint8_t out_mode;
	uint8_t ch = 1;
 29a:	c1 e0       	ldi	r28, 0x01	; 1
    while( *data != '\0' )
 29c:	f8 01       	movw	r30, r16
 29e:	61 91       	ld	r22, Z+
 2a0:	8f 01       	movw	r16, r30
 2a2:	66 23       	and	r22, r22
 2a4:	79 f0       	breq	.+30     	; 0x2c4 <LcdStr+0x3e>
	{
    	if(mode == LCD_MODE_NORM || mode == LCD_MODE_INVERSE)
 2a6:	d2 30       	cpi	r29, 0x02	; 2
 2a8:	30 f0       	brcs	.+12     	; 0x2b6 <LcdStr+0x30>
    		out_mode = mode;
    	else if(ch >= startInverse && ch <= endInverse)
 2aa:	cf 15       	cp	r28, r15
 2ac:	30 f0       	brcs	.+12     	; 0x2ba <LcdStr+0x34>
    		out_mode = LCD_MODE_INVERSE;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	ec 16       	cp	r14, r28
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <LcdStr+0x36>
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <LcdStr+0x34>
 2b6:	8d 2f       	mov	r24, r29
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <LcdStr+0x36>
    	else out_mode = LCD_MODE_NORM;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
		LcdChr(out_mode, *data);
 2bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LcdChr>
		data++;
		ch++;
 2c0:	cf 5f       	subi	r28, 0xFF	; 255
 2c2:	ec cf       	rjmp	.-40     	; 0x29c <LcdStr+0x16>
	}
    return ch -= 1;
}
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8c 0f       	add	r24, r28
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <LcdZone>:
 * 					end_y -> number of end line
 * 					ch -> out char
 * 					length -> length zone (in pixel)
 * Return value	:	see return value in lcd8544.
 */
uint8_t LcdZone(uint8_t start_x,uint8_t start_y,uint8_t end_y,uint8_t ch,uint8_t length){
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	c6 2f       	mov	r28, r22
 2e4:	f4 2e       	mov	r15, r20
 2e6:	e2 2e       	mov	r14, r18
	uint8_t i,j;
	if( start_x > LCD_X_RES)
 2e8:	85 35       	cpi	r24, 0x55	; 85
 2ea:	e0 f4       	brcc	.+56     	; 0x324 <LcdZone+0x4e>
	        return OUT_OF_BORDER;
    if( start_y > LCD_Y_MAX)
 2ec:	66 30       	cpi	r22, 0x06	; 6
 2ee:	d0 f4       	brcc	.+52     	; 0x324 <LcdZone+0x4e>
        return OUT_OF_BORDER;
    for(j = start_y ; j <= end_y ; j++){
    	LcdSend(0x80 | start_x,LCD_CMD);
 2f0:	d8 2f       	mov	r29, r24
 2f2:	d0 68       	ori	r29, 0x80	; 128
	uint8_t i,j;
	if( start_x > LCD_X_RES)
	        return OUT_OF_BORDER;
    if( start_y > LCD_Y_MAX)
        return OUT_OF_BORDER;
    for(j = start_y ; j <= end_y ; j++){
 2f4:	fc 16       	cp	r15, r28
 2f6:	a0 f0       	brcs	.+40     	; 0x320 <LcdZone+0x4a>
    	LcdSend(0x80 | start_x,LCD_CMD);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	8d 2f       	mov	r24, r29
 2fc:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
        LcdSend(0x40 | j,LCD_CMD);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	8c 2f       	mov	r24, r28
 304:	80 64       	ori	r24, 0x40	; 64
 306:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
		for (i = 0; i < length; ++i) {
 30a:	10 e0       	ldi	r17, 0x00	; 0
 30c:	10 17       	cp	r17, r16
 30e:	31 f0       	breq	.+12     	; 0x31c <LcdZone+0x46>
			LcdSend(ch,LCD_DATA);
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	8e 2d       	mov	r24, r14
 314:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    if( start_y > LCD_Y_MAX)
        return OUT_OF_BORDER;
    for(j = start_y ; j <= end_y ; j++){
    	LcdSend(0x80 | start_x,LCD_CMD);
        LcdSend(0x40 | j,LCD_CMD);
		for (i = 0; i < length; ++i) {
 318:	1f 5f       	subi	r17, 0xFF	; 255
 31a:	f8 cf       	rjmp	.-16     	; 0x30c <LcdZone+0x36>
	uint8_t i,j;
	if( start_x > LCD_X_RES)
	        return OUT_OF_BORDER;
    if( start_y > LCD_Y_MAX)
        return OUT_OF_BORDER;
    for(j = start_y ; j <= end_y ; j++){
 31c:	cf 5f       	subi	r28, 0xFF	; 255
 31e:	ea cf       	rjmp	.-44     	; 0x2f4 <LcdZone+0x1e>
        LcdSend(0x40 | j,LCD_CMD);
		for (i = 0; i < length; ++i) {
			LcdSend(ch,LCD_DATA);
		}
    }
    return OK;
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	01 c0       	rjmp	.+2      	; 0x326 <LcdZone+0x50>
 * Return value	:	see return value in lcd8544.
 */
uint8_t LcdZone(uint8_t start_x,uint8_t start_y,uint8_t end_y,uint8_t ch,uint8_t length){
	uint8_t i,j;
	if( start_x > LCD_X_RES)
	        return OUT_OF_BORDER;
 324:	81 e0       	ldi	r24, 0x01	; 1
		for (i = 0; i < length; ++i) {
			LcdSend(ch,LCD_DATA);
		}
    }
    return OK;
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <LcdBigFontChar>:
    /* 	x_pos = 1; */
    /* } */
    /* LcdSend(0x80 | x_pos,LCD_CMD); */
    /* LcdSend(0x40 | y_pos,LCD_CMD); */
    return OK;
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret

00000338 <LcdBigFStr>:
 * 				  increment cursor location
 * Argument (s)	: ch -> Pointer of string to write
 * Return value	: See return value in lcd_8544.h
 */
uint8_t LcdBigFStr(char *ch){
	while(*ch){
 338:	fc 01       	movw	r30, r24
 33a:	21 91       	ld	r18, Z+
 33c:	cf 01       	movw	r24, r30
 33e:	21 11       	cpse	r18, r1
 340:	fb cf       	rjmp	.-10     	; 0x338 <LcdBigFStr>
		LcdBigFontChar(*ch);
		ch++;
	}
	return OK;
}
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret

00000346 <LcdBigStr>:
 * 				  increment cursor location
 * Argument (s)	: ch -> Pointer of string to write
 * Return value	: See return value in lcd_8544.h
 */
uint8_t LcdBigStr(uint8_t *ch){
	while(*ch){
 346:	fc 01       	movw	r30, r24
 348:	21 91       	ld	r18, Z+
 34a:	cf 01       	movw	r24, r30
 34c:	21 11       	cpse	r18, r1
 34e:	fb cf       	rjmp	.-10     	; 0x346 <LcdBigStr>
		LcdBigFontChar(*ch);
		ch++;
	}
	return OK;
}
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret

00000354 <SPIInit>:

void SPIInit(void)
{
	LCD_DDR |= (1 << LCD_IN_PIN) | (1 << LCD_CLK_PIN);
 354:	87 b3       	in	r24, 0x17	; 23
 356:	80 6a       	ori	r24, 0xA0	; 160
 358:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR);
 35a:	80 e5       	ldi	r24, 0x50	; 80
 35c:	8d b9       	out	0x0d, r24	; 13
 35e:	08 95       	ret

00000360 <LcdInit>:
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdInit(void){
#ifdef SPI_MODE
	SPIInit();
 360:	0e 94 aa 01 	call	0x354	; 0x354 <SPIInit>
	LCD_PORT |= (1 << LCD_RST_PIN);
 364:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DDR |= (1 << LCD_DC_PIN) | (1 << LCD_CE_PIN) | (1 << LCD_RST_PIN); /* All output */
 366:	87 b3       	in	r24, 0x17	; 23
 368:	8c 61       	ori	r24, 0x1C	; 28
 36a:	87 bb       	out	0x17, r24	; 23
	LCD_PORT |= (1 << LCD_RST_PIN);
	LCD_DDR |= (1 << LCD_DC_PIN) | (1 << LCD_IN_PIN) | (1 << LCD_CLK_PIN) | (1 << LCD_CE_PIN) | (1 << LCD_RST_PIN); /* All output */

#endif
    /* Pull-up on reset pin. */
	LCD_PORT &= ~(1 << LCD_RST_PIN);
 36c:	c4 98       	cbi	0x18, 4	; 24
	Delay();
	/* _delay_ms(1); */
    LCD_PORT |= (1 << LCD_RST_PIN);
 36e:	c4 9a       	sbi	0x18, 4	; 24

   /* Disable display controller. */
   LCD_PORT |= (1 << LCD_CE_PIN);
 370:	c3 9a       	sbi	0x18, 3	; 24
    LcdSend( 0x21, LCD_CMD ); /* LCD Extended Commands. */
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	81 e2       	ldi	r24, 0x21	; 33
 376:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend( 0xC8, LCD_CMD ); /* Set LCD Vop (Contrast).*/
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	88 ec       	ldi	r24, 0xC8	; 200
 37e:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend( 0x06, LCD_CMD ); /* Set Temp coefficent. */
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend( 0x13, LCD_CMD ); /* LCD bias mode 1:48. */
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	83 e1       	ldi	r24, 0x13	; 19
 38e:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend( 0x20, LCD_CMD ); /* LCD Standard Commands,Horizontal addressing mode */
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>
    LcdSend( 0x0C, LCD_CMD ); /* LCD in normal mode. */
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	0e 94 9e 00 	call	0x13c	; 0x13c <LcdSend>

    LcdClear();
 3a2:	0c 94 c9 00 	jmp	0x192	; 0x192 <LcdClear>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
