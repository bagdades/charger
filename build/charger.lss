
build/charger.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800152  00800152  00000c3c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019bd  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adf  00000000  00000000  00002735  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b6  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107c  00000000  00000000  000041be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000523a  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
  9e:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LcdCommand>:
	 _delay_us(100);
}

void LcdCommand(unsigned char command)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (command & 0xF0);
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	28 2f       	mov	r18, r24
  ac:	20 7f       	andi	r18, 0xF0	; 240
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
	LCD_PRT &= ~ (1 << LCD_RS);
  b2:	58 98       	cbi	0x0b, 0	; 11
	LCD_PRT &= ~ (1 << LCD_RW); 
  b4:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
  b6:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	35 e0       	ldi	r19, 0x05	; 5
  ba:	3a 95       	dec	r19
  bc:	f1 f7       	brne	.-4      	; 0xba <LcdCommand+0x14>
  be:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~ (1 << LCD_EN);
  c0:	5a 98       	cbi	0x0b, 2	; 11
  c2:	9a e6       	ldi	r25, 0x6A	; 106
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LcdCommand+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <LcdCommand+0x24>
	_delay_us(20);
	LCD_PRT = (LCD_PRT & 0x0F) | (command << 4);
  ca:	2b b1       	in	r18, 0x0b	; 11
  cc:	2f 70       	andi	r18, 0x0F	; 15
  ce:	30 e1       	ldi	r19, 0x10	; 16
  d0:	83 9f       	mul	r24, r19
  d2:	c0 01       	movw	r24, r0
  d4:	11 24       	eor	r1, r1
  d6:	82 2b       	or	r24, r18
  d8:	8b b9       	out	0x0b, r24	; 11
	LCD_PRT |= (1 << LCD_EN);
  da:	5a 9a       	sbi	0x0b, 2	; 11
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LcdCommand+0x38>
  e2:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);
  e4:	5a 98       	cbi	0x0b, 2	; 11
  e6:	08 95       	ret

000000e8 <LcdInit>:
#include "lcd.h"


void LcdInit(void)
{
	 LCD_DDR = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a b9       	out	0x0a, r24	; 10
	 LCD_PRT &= ~(1 << LCD_EN);
  ec:	5a 98       	cbi	0x0b, 2	; 11
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LcdInit+0xa>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LcdInit+0x10>
  f8:	00 00       	nop
	 _delay_us(2000);
	 LcdCommand(0x33);
  fa:	83 e3       	ldi	r24, 0x33	; 51
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 100:	8f e8       	ldi	r24, 0x8F	; 143
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LcdInit+0x1c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LcdInit+0x22>
 10a:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x32);
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 112:	8f e8       	ldi	r24, 0x8F	; 143
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LcdInit+0x2e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LcdInit+0x34>
 11c:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x28);
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LcdInit+0x40>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LcdInit+0x46>
 12e:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x0c);
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 136:	8f e8       	ldi	r24, 0x8F	; 143
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LcdInit+0x52>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LcdInit+0x58>
 140:	00 00       	nop
	 _delay_us(100);
	 LcdCommand(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9f e1       	ldi	r25, 0x1F	; 31
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LcdInit+0x64>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LcdInit+0x6a>
 152:	00 00       	nop
	 _delay_us(2000);
	 LcdCommand(0x06);
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 15a:	8f e8       	ldi	r24, 0x8F	; 143
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LcdInit+0x76>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LcdInit+0x7c>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LcdData>:
	LCD_PRT &= ~(1 << LCD_EN);
}

void LcdData(unsigned char data)
{
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
 168:	9b b1       	in	r25, 0x0b	; 11
 16a:	9f 70       	andi	r25, 0x0F	; 15
 16c:	28 2f       	mov	r18, r24
 16e:	20 7f       	andi	r18, 0xF0	; 240
 170:	92 2b       	or	r25, r18
 172:	9b b9       	out	0x0b, r25	; 11
	LCD_PRT |= (1 << LCD_RS);
 174:	58 9a       	sbi	0x0b, 0	; 11
	LCD_PRT &= ~(1 << LCD_RW);
 176:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
 178:	5a 9a       	sbi	0x0b, 2	; 11
 17a:	35 e0       	ldi	r19, 0x05	; 5
 17c:	3a 95       	dec	r19
 17e:	f1 f7       	brne	.-4      	; 0x17c <LcdData+0x14>
 180:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);
 182:	5a 98       	cbi	0x0b, 2	; 11
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
 184:	2b b1       	in	r18, 0x0b	; 11
 186:	2f 70       	andi	r18, 0x0F	; 15
 188:	30 e1       	ldi	r19, 0x10	; 16
 18a:	83 9f       	mul	r24, r19
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	82 2b       	or	r24, r18
 192:	8b b9       	out	0x0b, r24	; 11
	LCD_PRT |= (1 << LCD_RS);
 194:	58 9a       	sbi	0x0b, 0	; 11
	LCD_PRT &= ~(1 << LCD_RW);
 196:	59 98       	cbi	0x0b, 1	; 11
	LCD_PRT |= (1 << LCD_EN);
 198:	5a 9a       	sbi	0x0b, 2	; 11
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LcdData+0x34>
 1a0:	00 00       	nop
	_delay_us(1);
	LCD_PRT &= ~(1 << LCD_EN);         
 1a2:	5a 98       	cbi	0x0b, 2	; 11
 1a4:	8f e8       	ldi	r24, 0x8F	; 143
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LcdData+0x40>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LcdData+0x46>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LcdGotoxy>:
	_delay_us(100);
}

void LcdGotoxy(unsigned char x, unsigned char y)
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <LcdGotoxy+0xa>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <LcdGotoxy+0xc>
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char FIRSTCHARADDR[] = {0x80,0xc0,0x94,0xd4};// four line's address for 20x4 lcd
 1c2:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <__data_start+0x2>
 1ca:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__data_start+0x3>
 1ce:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_start+0x4>
 1d2:	09 83       	std	Y+1, r16	; 0x01
 1d4:	1a 83       	std	Y+2, r17	; 0x02
 1d6:	2b 83       	std	Y+3, r18	; 0x03
 1d8:	3c 83       	std	Y+4, r19	; 0x04
	LcdCommand(FIRSTCHARADDR[y-1]+x-1);
 1da:	fe 01       	movw	r30, r28
 1dc:	e6 0f       	add	r30, r22
 1de:	f1 1d       	adc	r31, r1
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	90 81       	ld	r25, Z
 1e4:	89 0f       	add	r24, r25
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
 1ea:	8f e8       	ldi	r24, 0x8F	; 143
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LcdGotoxy+0x3c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LcdGotoxy+0x42>
 1f4:	00 00       	nop
	_delay_us(100);
}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <LcdPrint>:

void LcdPrint(char*str)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	8c 01       	movw	r16, r24
	unsigned char i=0;
 210:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != 0)
 212:	f8 01       	movw	r30, r16
 214:	ec 0f       	add	r30, r28
 216:	f1 1d       	adc	r31, r1
 218:	80 81       	ld	r24, Z
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <LcdPrint+0x1e>
	{ 
		LcdData(str[i]);
 21e:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
		i++;
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	f6 cf       	rjmp	.-20     	; 0x212 <LcdPrint+0xa>
	}
}
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	08 95       	ret

0000022e <LcdClear>:

void LcdClear(void)
{
	LcdCommand(0x01);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <LcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <LcdClear+0xa>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LcdClear+0x10>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <PWM_Init>:
uint8_t OCR_temp, calib_mode, batt, cc_mode, cv_mode, li_ion=1;//to denote li_ion as default battery type

void PWM_Init(void)
{
	/* TCCR2|=(1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<CS20); */
	TCCR2A |= (1 << WGM20) | (1 << WGM21) | (1 << COM2A1); 
 242:	e0 eb       	ldi	r30, 0xB0	; 176
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	83 68       	ori	r24, 0x83	; 131
 24a:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
 24c:	e1 eb       	ldi	r30, 0xB1	; 177
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	81 60       	ori	r24, 0x01	; 1
 254:	80 83       	st	Z, r24
	/* TCCR2B |= (1 << WGM22) | (1 << CS20); */
	DDRB |= (1 << PB3);
 256:	23 9a       	sbi	0x04, 3	; 4
	OCR2A = 0;
 258:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 25c:	08 95       	ret

0000025e <SwPressed>:
}

uint8_t SwPressed(void)
{
	if (bit_is_clear(SW_PIN, SWITCH)) 
 25e:	1c 99       	sbic	0x03, 4	; 3
 260:	19 c0       	rjmp	.+50     	; 0x294 <SwPressed+0x36>
 262:	2f e7       	ldi	r18, 0x7F	; 127
 264:	88 e3       	ldi	r24, 0x38	; 56
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <SwPressed+0xa>
 270:	00 c0       	rjmp	.+0      	; 0x272 <SwPressed+0x14>
 272:	00 00       	nop
	{
		_delay_ms(25);
		if (bit_is_clear(SW_PIN, SWITCH)) 
 274:	1c 99       	sbic	0x03, 4	; 3
 276:	02 c0       	rjmp	.+4      	; 0x27c <SwPressed+0x1e>
			while(bit_is_clear(SW_PIN, SWITCH));
 278:	1c 9b       	sbis	0x03, 4	; 3
 27a:	fe cf       	rjmp	.-4      	; 0x278 <SwPressed+0x1a>
		if(calib_mode == 0)
 27c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 280:	81 11       	cpse	r24, r1
 282:	04 c0       	rjmp	.+8      	; 0x28c <SwPressed+0x2e>
			calib_mode = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
 28a:	08 95       	ret
		else 
			calib_mode = 0;
 28c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
		return 1;
	}
	return 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
}
 296:	08 95       	ret

00000298 <MeasureVolt>:
uint16_t MeasureVolt(void)
{
	unsigned int adc_avg;
	unsigned int volt;
	float temp_val;
	adc_avg = ADC_ReadAvg(1, 101);
 298:	65 e6       	ldi	r22, 0x65	; 101
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ADC_ReadAvg>
	temp_val = (adc_avg * REF_VOLT * DIV) / 1024;
	volt = (unsigned int)(temp_val * 100);
	return volt;
 2a2:	bc 01       	movw	r22, r24
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
 2ac:	2c ee       	ldi	r18, 0xEC	; 236
 2ae:	31 e5       	ldi	r19, 0x51	; 81
 2b0:	40 ea       	ldi	r20, 0xA0	; 160
 2b2:	50 e4       	ldi	r21, 0x40	; 64
 2b4:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e8       	ldi	r20, 0x80	; 128
 2be:	50 e4       	ldi	r21, 0x40	; 64
 2c0:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e8       	ldi	r20, 0x80	; 128
 2ca:	5a e3       	ldi	r21, 0x3A	; 58
 2cc:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	48 ec       	ldi	r20, 0xC8	; 200
 2d6:	52 e4       	ldi	r21, 0x42	; 66
 2d8:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 2dc:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
}
 2e0:	cb 01       	movw	r24, r22
 2e2:	08 95       	ret

000002e4 <MeasureAmp>:
uint16_t MeasureAmp(void)
{
	float temp_val;
	uint16_t result;
	uint16_t amp = 0;
	result = ADC_ReadAvg(0, 101);
 2e4:	65 e6       	ldi	r22, 0x65	; 101
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ADC_ReadAvg>
	temp_val = (result * REF_VOLT) / 1024;
	amp = (uint16_t)(temp_val * 200);
	return amp;
 2ee:	bc 01       	movw	r22, r24
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 ae 04 	call	0x95c	; 0x95c <__floatunsisf>
 2f8:	2c ee       	ldi	r18, 0xEC	; 236
 2fa:	31 e5       	ldi	r19, 0x51	; 81
 2fc:	40 ea       	ldi	r20, 0xA0	; 160
 2fe:	50 e4       	ldi	r21, 0x40	; 64
 300:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e8       	ldi	r20, 0x80	; 128
 30a:	5a e3       	ldi	r21, 0x3A	; 58
 30c:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	48 e4       	ldi	r20, 0x48	; 72
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 31c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fixunssfsi>
}
 320:	cb 01       	movw	r24, r22
 322:	08 95       	ret

00000324 <PrintConst1>:

void PrintConst1(void)
{
	LcdGotoxy(1,1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Vo-");
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(6,1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 33c:	8e e2       	ldi	r24, 0x2E	; 46
 33e:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdGotoxy(16,1);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('%');
 34a:	85 e2       	ldi	r24, 0x25	; 37
 34c:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdGotoxy(1,2);
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Vb-");
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(10,2);
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("Ia-");
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	LcdGotoxy(15,2);
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	8f e0       	ldi	r24, 0x0F	; 15
 374:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 378:	8e e2       	ldi	r24, 0x2E	; 46
 37a:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

0000037e <PrintParam>:
}

void PrintParam(uint8_t x1, uint8_t y1, uint16_t val2)
{
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	c8 2f       	mov	r28, r24
 388:	d6 2f       	mov	r29, r22
 38a:	8a 01       	movw	r16, r20
	LcdGotoxy(x1, y1);
 38c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData((val2 / 1000) + 48);
 390:	c8 01       	movw	r24, r16
 392:	68 ee       	ldi	r22, 0xE8	; 232
 394:	73 e0       	ldi	r23, 0x03	; 3
 396:	0e 94 49 04 	call	0x892	; 0x892 <__udivmodhi4>
 39a:	8c 01       	movw	r16, r24
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	86 0f       	add	r24, r22
 3a0:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val2 %= 1000;
	LcdData((val2 / 100) + 48);
 3a4:	c8 01       	movw	r24, r16
 3a6:	64 e6       	ldi	r22, 0x64	; 100
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	0e 94 49 04 	call	0x892	; 0x892 <__udivmodhi4>
 3ae:	8c 01       	movw	r16, r24
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	86 0f       	add	r24, r22
 3b4:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val2 %= 100;
	LcdGotoxy((x1 + 2), y1);
 3b8:	6d 2f       	mov	r22, r29
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	8c 0f       	add	r24, r28
 3be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdData('.');
 3c2:	8e e2       	ldi	r24, 0x2E	; 46
 3c4:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	LcdData((val2 / 10) + 48);
 3c8:	c8 01       	movw	r24, r16
 3ca:	6a e0       	ldi	r22, 0x0A	; 10
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	0e 94 49 04 	call	0x892	; 0x892 <__udivmodhi4>
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	86 0f       	add	r24, r22
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
	val2 %= 1000;
	LcdData((val2 / 100) + 48);
	val2 %= 100;
	LcdGotoxy((x1 + 2), y1);
	LcdData('.');
	LcdData((val2 / 10) + 48);
 3de:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

000003e2 <Print>:
}

void Print(uint8_t val)
{
 3e2:	cf 93       	push	r28
	val %= 100;
 3e4:	64 e6       	ldi	r22, 0x64	; 100
 3e6:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodqi4>
 3ea:	89 2f       	mov	r24, r25
	LcdData((val / 10) + 48);
 3ec:	6a e0       	ldi	r22, 0x0A	; 10
 3ee:	0e 94 3d 04 	call	0x87a	; 0x87a <__udivmodqi4>
 3f2:	c9 2f       	mov	r28, r25
 3f4:	80 5d       	subi	r24, 0xD0	; 208
 3f6:	0e 94 b4 00 	call	0x168	; 0x168 <LcdData>
	val %= 10;
	LcdData(val + 48);
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	8c 0f       	add	r24, r28
}
 3fe:	cf 91       	pop	r28
void Print(uint8_t val)
{
	val %= 100;
	LcdData((val / 10) + 48);
	val %= 10;
	LcdData(val + 48);
 400:	0c 94 b4 00 	jmp	0x168	; 0x168 <LcdData>

00000404 <PrintDuty>:
}

void PrintDuty(uint8_t vall)
{
 404:	cf 93       	push	r28
 406:	c8 2f       	mov	r28, r24
	uint16_t temp;
	temp = ((vall + 1) * 100) / 256;
	LcdGotoxy(14, 1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	8e e0       	ldi	r24, 0x0E	; 14
 40c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	Print((uint8_t)temp);
 410:	8c 2f       	mov	r24, r28
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	44 e6       	ldi	r20, 0x64	; 100
 418:	48 9f       	mul	r20, r24
 41a:	90 01       	movw	r18, r0
 41c:	49 9f       	mul	r20, r25
 41e:	30 0d       	add	r19, r0
 420:	11 24       	eor	r1, r1
 422:	83 2f       	mov	r24, r19
}
 424:	cf 91       	pop	r28
void PrintDuty(uint8_t vall)
{
	uint16_t temp;
	temp = ((vall + 1) * 100) / 256;
	LcdGotoxy(14, 1);
	Print((uint8_t)temp);
 426:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <Print>

0000042a <ChargeLiIon>:
}

void ChargeLiIon(void)
{
 42a:	cf 93       	push	r28
	PORTB &= ~(1 << MOSFET);//off mosfet in order to read the battery
 42c:	29 98       	cbi	0x05, 1	; 5
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	9c e9       	ldi	r25, 0x9C	; 156
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <ChargeLiIon+0x8>
 436:	00 c0       	rjmp	.+0      	; 0x438 <ChargeLiIon+0xe>
 438:	00 00       	nop
	_delay_ms(10);
	volt_temp = MeasureVolt();
 43a:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 43e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 442:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
	if (volt_temp == 0) 
 446:	89 2b       	or	r24, r25
 448:	b9 f0       	breq	.+46     	; 0x478 <ChargeLiIon+0x4e>
				batt = 1;
			}
		}
	}
//------if battery detected,check the battery status--------//
	if ((volt_temp < 900) && (volt_temp > 0)) /* if batter voltage is below 9.00v and gteater than 0v */
 44a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <volt_temp>
 44e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <volt_temp+0x1>
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	83 38       	cpi	r24, 0x83	; 131
 456:	93 40       	sbci	r25, 0x03	; 3
 458:	c0 f5       	brcc	.+112    	; 0x4ca <ChargeLiIon+0xa0>
	{
		LcdClear();
 45a:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		LcdGotoxy(1, 1);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint(" Faulty battery"); /* notify that it is faulty battery */
 466:	81 e2       	ldi	r24, 0x21	; 33
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		li_ion = 0;      /* exit the charging process */
 46e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		batt = 0;        /* - to notify a faulty battery */
 472:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <batt>
 476:	29 c0       	rjmp	.+82     	; 0x4ca <ChargeLiIon+0xa0>
	PORTB &= ~(1 << MOSFET);//off mosfet in order to read the battery
	_delay_ms(10);
	volt_temp = MeasureVolt();
	if (volt_temp == 0) 
	{
		LcdClear();
 478:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		LcdGotoxy(1, 1);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint(" Insert battery");
 484:	81 e1       	ldi	r24, 0x11	; 17
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		batt = 0;
 48c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <batt>
		{
			volt_temp = MeasureVolt(); /* Check if battery detected */
			_delay_ms(500); /* after every 500 ms */
			if (volt_temp > 0) /* if battery voltage greater than 0v, then get out of the loop */
			{
				batt = 1;
 490:	c1 e0       	ldi	r28, 0x01	; 1
	{
		LcdClear();
		LcdGotoxy(1, 1);
		LcdPrint(" Insert battery");
		batt = 0;
		while (batt == 0) /* This loop is created if someone turns on the charger without battery adn then plugs in the battery */
 492:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <batt>
 496:	81 11       	cpse	r24, r1
 498:	d8 cf       	rjmp	.-80     	; 0x44a <ChargeLiIon+0x20>
		{
			volt_temp = MeasureVolt(); /* Check if battery detected */
 49a:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 49e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 4a2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	99 e6       	ldi	r25, 0x69	; 105
 4aa:	28 e1       	ldi	r18, 0x18	; 24
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	20 40       	sbci	r18, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <ChargeLiIon+0x82>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <ChargeLiIon+0x8c>
 4b6:	00 00       	nop
			_delay_ms(500); /* after every 500 ms */
			if (volt_temp > 0) /* if battery voltage greater than 0v, then get out of the loop */
 4b8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <volt_temp>
 4bc:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <volt_temp+0x1>
 4c0:	89 2b       	or	r24, r25
 4c2:	39 f3       	breq	.-50     	; 0x492 <ChargeLiIon+0x68>
			{
				batt = 1;
 4c4:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <batt>
 4c8:	e4 cf       	rjmp	.-56     	; 0x492 <ChargeLiIon+0x68>
		LcdGotoxy(1, 1);
		LcdPrint(" Faulty battery"); /* notify that it is faulty battery */
		li_ion = 0;      /* exit the charging process */
		batt = 0;        /* - to notify a faulty battery */
	}
	if (volt_temp > 900) 
 4ca:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <volt_temp>
 4ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <volt_temp+0x1>
 4d2:	85 38       	cpi	r24, 0x85	; 133
 4d4:	93 40       	sbci	r25, 0x03	; 3
 4d6:	18 f0       	brcs	.+6      	; 0x4de <ChargeLiIon+0xb4>
	{
		batt = 1;        /* proper battery detected, enter into charging mode */
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <batt>
	}
//--------if the battery is found ok,then-----------//
	if (batt == 1)       /* if the battery is connected */
 4de:	c0 91 53 01 	lds	r28, 0x0153	; 0x800153 <batt>
 4e2:	c1 30       	cpi	r28, 0x01	; 1
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <ChargeLiIon+0xbe>
 4e6:	e4 c0       	rjmp	.+456    	; 0x6b0 <ChargeLiIon+0x286>
	{
		LcdClear();
 4e8:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
		PrintConst1();
 4ec:	0e 94 92 01 	call	0x324	; 0x324 <PrintConst1>
		cc_mode = 1;     /* now enter in CC mode */
 4f0:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <cc_mode>
		LcdGotoxy(9, 1);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	89 e0       	ldi	r24, 0x09	; 9
 4f8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint("CC");  /* notify cc mode via lcd */
 4fc:	81 e3       	ldi	r24, 0x31	; 49
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
		OCR2A = 63;      /* start PWM form 25% */
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			}
			else
			{
               /* continue with CC mode */
				PrintParam(4, 2, volt_temp);
				PORTB |= (1 << MOSFET); /* again turn on the modfet */
 50a:	29 9a       	sbi	0x05, 1	; 5
		LcdGotoxy(9, 1);
		LcdPrint("CC");  /* notify cc mode via lcd */
		OCR2A = 63;      /* start PWM form 25% */
		PORTB |= (1 << MOSFET); /* open the output mosfet */
//------now in CC mode----------//
		while (cc_mode == 1) 
 50c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <cc_mode>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	09 f0       	breq	.+2      	; 0x516 <ChargeLiIon+0xec>
 514:	58 c0       	rjmp	.+176    	; 0x5c6 <ChargeLiIon+0x19c>
		{
			amp_temp = MeasureAmp(); /* measure amp */
 516:	0e 94 72 01 	call	0x2e4	; 0x2e4 <MeasureAmp>
 51a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <amp_temp+0x1>
 51e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <amp_temp>
			if (amp_temp < 100) 
 522:	84 36       	cpi	r24, 0x64	; 100
 524:	91 05       	cpc	r25, r1
 526:	20 f4       	brcc	.+8      	; 0x530 <ChargeLiIon+0x106>
			{
				OCR2A++;
 528:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	03 c0       	rjmp	.+6      	; 0x536 <ChargeLiIon+0x10c>
			}
			else
			{
				OCR2A--;
 530:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 534:	81 50       	subi	r24, 0x01	; 1
 536:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			}
			volt_temp = MeasureVolt(); /* Now measure the voltage */
 53a:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 53e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 542:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
			PrintParam(4, 1, volt_temp); /* print the output voltage */
 546:	ac 01       	movw	r20, r24
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	84 e0       	ldi	r24, 0x04	; 4
 54c:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
			PrintParam(13, 2, amp_temp); /* print the current */
 550:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <amp_temp>
 554:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <amp_temp+0x1>
 558:	62 e0       	ldi	r22, 0x02	; 2
 55a:	8d e0       	ldi	r24, 0x0D	; 13
 55c:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
			PrintDuty(OCR2A);
 560:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 564:	0e 94 02 02 	call	0x404	; 0x404 <PrintDuty>
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	99 e6       	ldi	r25, 0x69	; 105
 56c:	28 e1       	ldi	r18, 0x18	; 24
 56e:	81 50       	subi	r24, 0x01	; 1
 570:	90 40       	sbci	r25, 0x00	; 0
 572:	20 40       	sbci	r18, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <ChargeLiIon+0x144>
 576:	00 c0       	rjmp	.+0      	; 0x578 <ChargeLiIon+0x14e>
 578:	00 00       	nop
			_delay_ms(500); /* wait 100 ms for next */
			PORTB &= ~(1 << MOSFET); /* now switch off the mosfet to measure battery voltage */
 57a:	29 98       	cbi	0x05, 1	; 5
 57c:	8f e3       	ldi	r24, 0x3F	; 63
 57e:	9c e9       	ldi	r25, 0x9C	; 156
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <ChargeLiIon+0x156>
 584:	00 c0       	rjmp	.+0      	; 0x586 <ChargeLiIon+0x15c>
 586:	00 00       	nop
			_delay_ms(10); /* wait little hit */
			volt_temp = MeasureVolt();
 588:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 58c:	ac 01       	movw	r20, r24
 58e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 592:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
			if (volt_temp > 1240) /* if the battery voltage is greater than 12.4 volt */
 596:	49 3d       	cpi	r20, 0xD9	; 217
 598:	94 e0       	ldi	r25, 0x04	; 4
 59a:	59 07       	cpc	r21, r25
 59c:	78 f0       	brcs	.+30     	; 0x5bc <ChargeLiIon+0x192>
			{
				cc_mode = 0; /* exit CC mode */
 59e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <cc_mode>
				PrintParam(4, 2, volt_temp); /* print the voltage */
 5a2:	62 e0       	ldi	r22, 0x02	; 2
 5a4:	84 e0       	ldi	r24, 0x04	; 4
 5a6:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
				LcdGotoxy(9, 1);
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	89 e0       	ldi	r24, 0x09	; 9
 5ae:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
				LcdPrint("  "); /* notify that we have exited CC mode via lcd */
 5b2:	84 e3       	ldi	r24, 0x34	; 52
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
 5ba:	a8 cf       	rjmp	.-176    	; 0x50c <ChargeLiIon+0xe2>
			}
			else
			{
               /* continue with CC mode */
				PrintParam(4, 2, volt_temp);
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
 5c4:	a2 cf       	rjmp	.-188    	; 0x50a <ChargeLiIon+0xe0>
				PORTB |= (1 << MOSFET); /* again turn on the modfet */
			}
		}
//--------now entering CV mode---------//
		cv_mode = 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cv_mode>
		LcdGotoxy(9, 1);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	89 e0       	ldi	r24, 0x09	; 9
 5d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
		LcdPrint("CV"); /* nofify CV mode via lcd */
 5d4:	87 e3       	ldi	r24, 0x37	; 55
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
				break;
			}
			else
			{
				PrintParam(13, 2, amp_temp); /* print the current adn continue with CV mode */
				PORTB |= (1 << MOSFET); /* switch the mosfet on again */
 5dc:	29 9a       	sbi	0x05, 1	; 5
//--------now entering CV mode---------//
		cv_mode = 1;
		LcdGotoxy(9, 1);
		LcdPrint("CV"); /* nofify CV mode via lcd */
		PORTB |= (1 << MOSFET); /* start charge */
		while (cv_mode == 1) 
 5de:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cv_mode>
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <ChargeLiIon+0x1be>
 5e6:	64 c0       	rjmp	.+200    	; 0x6b0 <ChargeLiIon+0x286>
		{
			volt_temp = MeasureVolt();
 5e8:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 5ec:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 5f0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
               /* we will maintain the output voltage at 12.6v as CV mode voltage */
			if (volt_temp < 1250) 
 5f4:	82 3e       	cpi	r24, 0xE2	; 226
 5f6:	94 40       	sbci	r25, 0x04	; 4
 5f8:	20 f4       	brcc	.+8      	; 0x602 <ChargeLiIon+0x1d8>
			{
				OCR2A++;
 5fa:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	03 c0       	rjmp	.+6      	; 0x608 <ChargeLiIon+0x1de>
			}
			else
			{
				OCR2A--;
 602:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 606:	81 50       	subi	r24, 0x01	; 1
 608:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			}
			PrintParam(4, 1, volt_temp); /* Print the output voltage */
 60c:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <volt_temp>
 610:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <volt_temp+0x1>
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
			PrintDuty(OCR2A);
 61c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 620:	0e 94 02 02 	call	0x404	; 0x404 <PrintDuty>
			amp_temp = MeasureAmp();
 624:	0e 94 72 01 	call	0x2e4	; 0x2e4 <MeasureAmp>
 628:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <amp_temp+0x1>
 62c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <amp_temp>
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	93 ed       	ldi	r25, 0xD3	; 211
 634:	20 e3       	ldi	r18, 0x30	; 48
 636:	81 50       	subi	r24, 0x01	; 1
 638:	90 40       	sbci	r25, 0x00	; 0
 63a:	20 40       	sbci	r18, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <ChargeLiIon+0x20c>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <ChargeLiIon+0x216>
 640:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1 << MOSFET); /* now switch off the mosfet to measure battery voltage */
 642:	29 98       	cbi	0x05, 1	; 5
 644:	8f e3       	ldi	r24, 0x3F	; 63
 646:	9c e9       	ldi	r25, 0x9C	; 156
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <ChargeLiIon+0x21e>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <ChargeLiIon+0x224>
 64e:	00 00       	nop
			_delay_ms(10); /* wait a little hit */
			volt_temp = MeasureVolt();
 650:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 654:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 658:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
			PrintParam(4, 2, volt_temp); /* print battery voltage */
 65c:	ac 01       	movw	r20, r24
 65e:	62 e0       	ldi	r22, 0x02	; 2
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
			if ((amp_temp < 19) && (volt_temp > 1250)) /* if amp below approx 190ma & battery voltage is greater than 12.5v */
 666:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <amp_temp>
 66a:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <amp_temp+0x1>
 66e:	43 31       	cpi	r20, 0x13	; 19
 670:	51 05       	cpc	r21, r1
 672:	c8 f4       	brcc	.+50     	; 0x6a6 <ChargeLiIon+0x27c>
 674:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <volt_temp>
 678:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <volt_temp+0x1>
 67c:	83 3e       	cpi	r24, 0xE3	; 227
 67e:	94 40       	sbci	r25, 0x04	; 4
 680:	90 f0       	brcs	.+36     	; 0x6a6 <ChargeLiIon+0x27c>
			{
				LcdClear();
 682:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
				LcdGotoxy(1, 1);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
				LcdPrint("Charge comlete");
 68e:	8a e3       	ldi	r24, 0x3A	; 58
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
				cv_mode = 0; /* stop cv mode and complete charge cycle */
 696:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <cv_mode>
				batt = 0;
 69a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <batt>
				li_ion = 0;
 69e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				PORTB |= (1 << BUZZER); /* turn on buzzer to notify a full charge */
 6a2:	2a 9a       	sbi	0x05, 2	; 5
				break;
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <ChargeLiIon+0x286>
			}
			else
			{
				PrintParam(13, 2, amp_temp); /* print the current adn continue with CV mode */
 6a6:	62 e0       	ldi	r22, 0x02	; 2
 6a8:	8d e0       	ldi	r24, 0x0D	; 13
 6aa:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
 6ae:	96 cf       	rjmp	.-212    	; 0x5dc <ChargeLiIon+0x1b2>
				PORTB |= (1 << MOSFET); /* switch the mosfet on again */
			}
		}
	}
}
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <Calibrate>:

void Calibrate(void)
{
	LcdClear();
 6b4:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
	LcdGotoxy(1, 2);
 6b8:	62 e0       	ldi	r22, 0x02	; 2
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LcdGotoxy>
	LcdPrint("cal mode");
 6c0:	89 e4       	ldi	r24, 0x49	; 73
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 04 01 	call	0x208	; 0x208 <LcdPrint>
	while (calib_mode) 
 6c8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 6cc:	88 23       	and	r24, r24
 6ce:	31 f1       	breq	.+76     	; 0x71c <Calibrate+0x68>
	{
		volt_temp = MeasureVolt();
 6d0:	0e 94 4c 01 	call	0x298	; 0x298 <MeasureVolt>
 6d4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <volt_temp+0x1>
 6d8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <volt_temp>
		PrintParam(4, 1, volt_temp);
 6dc:	ac 01       	movw	r20, r24
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	84 e0       	ldi	r24, 0x04	; 4
 6e2:	0e 94 bf 01 	call	0x37e	; 0x37e <PrintParam>
 6e6:	2f ef       	ldi	r18, 0xFF	; 255
 6e8:	81 ee       	ldi	r24, 0xE1	; 225
 6ea:	94 e0       	ldi	r25, 0x04	; 4
 6ec:	21 50       	subi	r18, 0x01	; 1
 6ee:	80 40       	sbci	r24, 0x00	; 0
 6f0:	90 40       	sbci	r25, 0x00	; 0
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <Calibrate+0x38>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <Calibrate+0x42>
 6f6:	00 00       	nop
		_delay_ms(100);
		if (SwPressed()) 
 6f8:	0e 94 2f 01 	call	0x25e	; 0x25e <SwPressed>
 6fc:	88 23       	and	r24, r24
 6fe:	21 f3       	breq	.-56     	; 0x6c8 <Calibrate+0x14>
		{
			LcdClear();
 700:	0e 94 17 01 	call	0x22e	; 0x22e <LcdClear>
			PrintConst1();
 704:	0e 94 92 01 	call	0x324	; 0x324 <PrintConst1>
 708:	2f ef       	ldi	r18, 0xFF	; 255
 70a:	81 ee       	ldi	r24, 0xE1	; 225
 70c:	94 e0       	ldi	r25, 0x04	; 4
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	90 40       	sbci	r25, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <Calibrate+0x5a>
 716:	00 c0       	rjmp	.+0      	; 0x718 <Calibrate+0x64>
 718:	00 00       	nop
 71a:	d6 cf       	rjmp	.-84     	; 0x6c8 <Calibrate+0x14>
			_delay_ms(100);
		}
	}
}
 71c:	08 95       	ret

0000071e <main>:

int main(void)
{
	SW_PIN &= ~(1 << SWITCH); /* make PB0 input */
 71e:	1c 98       	cbi	0x03, 4	; 3
	SW_PORT |= (1 << SWITCH); /* pull up enable */
 720:	2c 9a       	sbi	0x05, 4	; 5
	DDRB |= (1 << MOSFET) | (1 << BUZZER);//make PB1,PB2 output to drive "output" mosfet & buzzer
 722:	84 b1       	in	r24, 0x04	; 4
 724:	86 60       	ori	r24, 0x06	; 6
 726:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << MOSFET) | (1 << BUZZER));//make it initially off i.e no buck output voltage to battery & buzzer off
 728:	85 b1       	in	r24, 0x05	; 5
 72a:	89 7f       	andi	r24, 0xF9	; 249
 72c:	85 b9       	out	0x05, r24	; 5
	ADC_Init();
 72e:	0e 94 be 03 	call	0x77c	; 0x77c <ADC_Init>
 732:	8f e9       	ldi	r24, 0x9F	; 159
 734:	9f e0       	ldi	r25, 0x0F	; 15
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <main+0x18>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <main+0x1e>
 73c:	00 00       	nop
	_delay_ms(1);
	PWM_Init();
 73e:	0e 94 21 01 	call	0x242	; 0x242 <PWM_Init>
 742:	8f e9       	ldi	r24, 0x9F	; 159
 744:	9f e0       	ldi	r25, 0x0F	; 15
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	f1 f7       	brne	.-4      	; 0x746 <main+0x28>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x2e>
 74c:	00 00       	nop
	_delay_ms(1);
	LcdInit();
 74e:	0e 94 74 00 	call	0xe8	; 0xe8 <LcdInit>
 752:	8f e3       	ldi	r24, 0x3F	; 63
 754:	9c e9       	ldi	r25, 0x9C	; 156
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <main+0x38>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <main+0x3e>
 75c:	00 00       	nop
	_delay_ms(10);
	OCR2A = 63; //(25% PWM output)
 75e:	8f e3       	ldi	r24, 0x3F	; 63
 760:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	while (1) 
	{
		if (SwPressed()) 
 764:	0e 94 2f 01 	call	0x25e	; 0x25e <SwPressed>
 768:	81 11       	cpse	r24, r1
		{
			Calibrate();
 76a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <Calibrate>
		}
		if (li_ion) 
 76e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 772:	88 23       	and	r24, r24
 774:	b9 f3       	breq	.-18     	; 0x764 <main+0x46>
		{
			ChargeLiIon();
 776:	0e 94 15 02 	call	0x42a	; 0x42a <ChargeLiIon>
 77a:	f4 cf       	rjmp	.-24     	; 0x764 <main+0x46>

0000077c <ADC_Init>:

#include "adc.h"

void ADC_Init(void)
{
	DDRC = 0x00;          /* make adc port input */
 77c:	17 b8       	out	0x07, r1	; 7
	ADCSRA |=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//ADC enabled,clk/128 frequency
 77e:	ea e7       	ldi	r30, 0x7A	; 122
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	87 68       	ori	r24, 0x87	; 135
 786:	80 83       	st	Z, r24
 788:	08 95       	ret

0000078a <ADC_ReadRaw>:
}

uint16_t ADC_ReadRaw(uint8_t ch)
{
	ch = ch & 0x07;
 78a:	87 70       	andi	r24, 0x07	; 7
	ADMUX = ADCREF_AREF | ch;
 78c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1 << ADSC); /* adc start conversion */
 790:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 794:	80 64       	ori	r24, 0x40	; 64
 796:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while((ADCSRA & (1 << ADIF)) == 0); /* stay until ADIF becomes 1 to indicate finish conversion */
 79a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 79e:	84 ff       	sbrs	r24, 4
 7a0:	fc cf       	rjmp	.-8      	; 0x79a <ADC_ReadRaw+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a2:	85 e0       	ldi	r24, 0x05	; 5
 7a4:	8a 95       	dec	r24
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <ADC_ReadRaw+0x1a>
 7a8:	00 00       	nop
	_delay_us(1);
	return(ADC);          /* return ADCH + ADCL  */
 7aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 7ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 7b2:	08 95       	ret

000007b4 <ADC_ReadAvg>:

uint16_t ADC_ReadAvg(uint8_t ch, uint16_t sample)
{
 7b4:	4f 92       	push	r4
 7b6:	5f 92       	push	r5
 7b8:	6f 92       	push	r6
 7ba:	7f 92       	push	r7
 7bc:	8f 92       	push	r8
 7be:	9f 92       	push	r9
 7c0:	af 92       	push	r10
 7c2:	bf 92       	push	r11
 7c4:	cf 92       	push	r12
 7c6:	df 92       	push	r13
 7c8:	ef 92       	push	r14
 7ca:	ff 92       	push	r15
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	88 2e       	mov	r8, r24
 7da:	7b 01       	movw	r14, r22
		sum += r[i];
		_delay_ms(1);
	}
	avg = sum/sample;
	return avg;
}
 7dc:	cd b6       	in	r12, 0x3d	; 61
 7de:	de b6       	in	r13, 0x3e	; 62
}

uint16_t ADC_ReadAvg(uint8_t ch, uint16_t sample)
{
	unsigned char i;
	unsigned int r[sample];//to store multiple reading.No of samples is defined by the user as per criteria
 7e0:	cb 01       	movw	r24, r22
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	2d b7       	in	r18, 0x3d	; 61
 7e8:	3e b7       	in	r19, 0x3e	; 62
 7ea:	28 1b       	sub	r18, r24
 7ec:	39 0b       	sbc	r19, r25
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	f8 94       	cli
 7f2:	3e bf       	out	0x3e, r19	; 62
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	2d bf       	out	0x3d, r18	; 61
 7f8:	8d b7       	in	r24, 0x3d	; 61
 7fa:	9e b7       	in	r25, 0x3e	; 62
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	5c 01       	movw	r10, r24
	unsigned int avg;//to store the average result
	unsigned long int sum = 0;//to store the sums of the readings and must be initialized as 0 to prevent errors
 800:	41 2c       	mov	r4, r1
 802:	51 2c       	mov	r5, r1
 804:	32 01       	movw	r6, r4
	for (i = 0; i < sample; i++) {
 806:	91 2c       	mov	r9, r1
 808:	09 2d       	mov	r16, r9
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	0e 15       	cp	r16, r14
 80e:	1f 05       	cpc	r17, r15
 810:	b0 f4       	brcc	.+44     	; 0x83e <ADC_ReadAvg+0x8a>
		r[i] = ADC_ReadRaw(ch);
 812:	88 2d       	mov	r24, r8
 814:	0e 94 c5 03 	call	0x78a	; 0x78a <ADC_ReadRaw>
 818:	00 0f       	add	r16, r16
 81a:	11 1f       	adc	r17, r17
 81c:	f5 01       	movw	r30, r10
 81e:	e0 0f       	add	r30, r16
 820:	f1 1f       	adc	r31, r17
 822:	91 83       	std	Z+1, r25	; 0x01
 824:	80 83       	st	Z, r24
		sum += r[i];
 826:	48 0e       	add	r4, r24
 828:	59 1e       	adc	r5, r25
 82a:	61 1c       	adc	r6, r1
 82c:	71 1c       	adc	r7, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 82e:	8f e9       	ldi	r24, 0x9F	; 159
 830:	9f e0       	ldi	r25, 0x0F	; 15
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <ADC_ReadAvg+0x7e>
 836:	00 c0       	rjmp	.+0      	; 0x838 <ADC_ReadAvg+0x84>
 838:	00 00       	nop
{
	unsigned char i;
	unsigned int r[sample];//to store multiple reading.No of samples is defined by the user as per criteria
	unsigned int avg;//to store the average result
	unsigned long int sum = 0;//to store the sums of the readings and must be initialized as 0 to prevent errors
	for (i = 0; i < sample; i++) {
 83a:	93 94       	inc	r9
 83c:	e5 cf       	rjmp	.-54     	; 0x808 <ADC_ReadAvg+0x54>
		r[i] = ADC_ReadRaw(ch);
		sum += r[i];
		_delay_ms(1);
	}
	avg = sum/sample;
	return avg;
 83e:	97 01       	movw	r18, r14
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	c3 01       	movw	r24, r6
 846:	b2 01       	movw	r22, r4
 848:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__udivmodsi4>
}
 84c:	c9 01       	movw	r24, r18
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de be       	out	0x3e, r13	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd be       	out	0x3d, r12	; 61
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	df 90       	pop	r13
 866:	cf 90       	pop	r12
 868:	bf 90       	pop	r11
 86a:	af 90       	pop	r10
 86c:	9f 90       	pop	r9
 86e:	8f 90       	pop	r8
 870:	7f 90       	pop	r7
 872:	6f 90       	pop	r6
 874:	5f 90       	pop	r5
 876:	4f 90       	pop	r4
 878:	08 95       	ret

0000087a <__udivmodqi4>:
 87a:	99 1b       	sub	r25, r25
 87c:	79 e0       	ldi	r23, 0x09	; 9
 87e:	04 c0       	rjmp	.+8      	; 0x888 <__udivmodqi4_ep>

00000880 <__udivmodqi4_loop>:
 880:	99 1f       	adc	r25, r25
 882:	96 17       	cp	r25, r22
 884:	08 f0       	brcs	.+2      	; 0x888 <__udivmodqi4_ep>
 886:	96 1b       	sub	r25, r22

00000888 <__udivmodqi4_ep>:
 888:	88 1f       	adc	r24, r24
 88a:	7a 95       	dec	r23
 88c:	c9 f7       	brne	.-14     	; 0x880 <__udivmodqi4_loop>
 88e:	80 95       	com	r24
 890:	08 95       	ret

00000892 <__udivmodhi4>:
 892:	aa 1b       	sub	r26, r26
 894:	bb 1b       	sub	r27, r27
 896:	51 e1       	ldi	r21, 0x11	; 17
 898:	07 c0       	rjmp	.+14     	; 0x8a8 <__udivmodhi4_ep>

0000089a <__udivmodhi4_loop>:
 89a:	aa 1f       	adc	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	a6 17       	cp	r26, r22
 8a0:	b7 07       	cpc	r27, r23
 8a2:	10 f0       	brcs	.+4      	; 0x8a8 <__udivmodhi4_ep>
 8a4:	a6 1b       	sub	r26, r22
 8a6:	b7 0b       	sbc	r27, r23

000008a8 <__udivmodhi4_ep>:
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	5a 95       	dec	r21
 8ae:	a9 f7       	brne	.-22     	; 0x89a <__udivmodhi4_loop>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	bc 01       	movw	r22, r24
 8b6:	cd 01       	movw	r24, r26
 8b8:	08 95       	ret

000008ba <__udivmodsi4>:
 8ba:	a1 e2       	ldi	r26, 0x21	; 33
 8bc:	1a 2e       	mov	r1, r26
 8be:	aa 1b       	sub	r26, r26
 8c0:	bb 1b       	sub	r27, r27
 8c2:	fd 01       	movw	r30, r26
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <__udivmodsi4_ep>

000008c6 <__udivmodsi4_loop>:
 8c6:	aa 1f       	adc	r26, r26
 8c8:	bb 1f       	adc	r27, r27
 8ca:	ee 1f       	adc	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	a2 17       	cp	r26, r18
 8d0:	b3 07       	cpc	r27, r19
 8d2:	e4 07       	cpc	r30, r20
 8d4:	f5 07       	cpc	r31, r21
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__udivmodsi4_ep>
 8d8:	a2 1b       	sub	r26, r18
 8da:	b3 0b       	sbc	r27, r19
 8dc:	e4 0b       	sbc	r30, r20
 8de:	f5 0b       	sbc	r31, r21

000008e0 <__udivmodsi4_ep>:
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a 94       	dec	r1
 8ea:	69 f7       	brne	.-38     	; 0x8c6 <__udivmodsi4_loop>
 8ec:	60 95       	com	r22
 8ee:	70 95       	com	r23
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	9b 01       	movw	r18, r22
 8f6:	ac 01       	movw	r20, r24
 8f8:	bd 01       	movw	r22, r26
 8fa:	cf 01       	movw	r24, r30
 8fc:	08 95       	ret

000008fe <__fixunssfsi>:
 8fe:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_splitA>
 902:	88 f0       	brcs	.+34     	; 0x926 <__stack+0x27>
 904:	9f 57       	subi	r25, 0x7F	; 127
 906:	98 f0       	brcs	.+38     	; 0x92e <__stack+0x2f>
 908:	b9 2f       	mov	r27, r25
 90a:	99 27       	eor	r25, r25
 90c:	b7 51       	subi	r27, 0x17	; 23
 90e:	b0 f0       	brcs	.+44     	; 0x93c <__stack+0x3d>
 910:	e1 f0       	breq	.+56     	; 0x94a <__stack+0x4b>
 912:	66 0f       	add	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	1a f0       	brmi	.+6      	; 0x922 <__stack+0x23>
 91c:	ba 95       	dec	r27
 91e:	c9 f7       	brne	.-14     	; 0x912 <__stack+0x13>
 920:	14 c0       	rjmp	.+40     	; 0x94a <__stack+0x4b>
 922:	b1 30       	cpi	r27, 0x01	; 1
 924:	91 f0       	breq	.+36     	; 0x94a <__stack+0x4b>
 926:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_zero>
 92a:	b1 e0       	ldi	r27, 0x01	; 1
 92c:	08 95       	ret
 92e:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_zero>
 932:	67 2f       	mov	r22, r23
 934:	78 2f       	mov	r23, r24
 936:	88 27       	eor	r24, r24
 938:	b8 5f       	subi	r27, 0xF8	; 248
 93a:	39 f0       	breq	.+14     	; 0x94a <__stack+0x4b>
 93c:	b9 3f       	cpi	r27, 0xF9	; 249
 93e:	cc f3       	brlt	.-14     	; 0x932 <__stack+0x33>
 940:	86 95       	lsr	r24
 942:	77 95       	ror	r23
 944:	67 95       	ror	r22
 946:	b3 95       	inc	r27
 948:	d9 f7       	brne	.-10     	; 0x940 <__stack+0x41>
 94a:	3e f4       	brtc	.+14     	; 0x95a <__stack+0x5b>
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	08 95       	ret

0000095c <__floatunsisf>:
 95c:	e8 94       	clt
 95e:	09 c0       	rjmp	.+18     	; 0x972 <__floatsisf+0x12>

00000960 <__floatsisf>:
 960:	97 fb       	bst	r25, 7
 962:	3e f4       	brtc	.+14     	; 0x972 <__floatsisf+0x12>
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	99 23       	and	r25, r25
 974:	a9 f0       	breq	.+42     	; 0x9a0 <__floatsisf+0x40>
 976:	f9 2f       	mov	r31, r25
 978:	96 e9       	ldi	r25, 0x96	; 150
 97a:	bb 27       	eor	r27, r27
 97c:	93 95       	inc	r25
 97e:	f6 95       	lsr	r31
 980:	87 95       	ror	r24
 982:	77 95       	ror	r23
 984:	67 95       	ror	r22
 986:	b7 95       	ror	r27
 988:	f1 11       	cpse	r31, r1
 98a:	f8 cf       	rjmp	.-16     	; 0x97c <__floatsisf+0x1c>
 98c:	fa f4       	brpl	.+62     	; 0x9cc <__floatsisf+0x6c>
 98e:	bb 0f       	add	r27, r27
 990:	11 f4       	brne	.+4      	; 0x996 <__floatsisf+0x36>
 992:	60 ff       	sbrs	r22, 0
 994:	1b c0       	rjmp	.+54     	; 0x9cc <__floatsisf+0x6c>
 996:	6f 5f       	subi	r22, 0xFF	; 255
 998:	7f 4f       	sbci	r23, 0xFF	; 255
 99a:	8f 4f       	sbci	r24, 0xFF	; 255
 99c:	9f 4f       	sbci	r25, 0xFF	; 255
 99e:	16 c0       	rjmp	.+44     	; 0x9cc <__floatsisf+0x6c>
 9a0:	88 23       	and	r24, r24
 9a2:	11 f0       	breq	.+4      	; 0x9a8 <__floatsisf+0x48>
 9a4:	96 e9       	ldi	r25, 0x96	; 150
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <__floatsisf+0x6a>
 9a8:	77 23       	and	r23, r23
 9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatsisf+0x54>
 9ac:	9e e8       	ldi	r25, 0x8E	; 142
 9ae:	87 2f       	mov	r24, r23
 9b0:	76 2f       	mov	r23, r22
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__floatsisf+0x5e>
 9b4:	66 23       	and	r22, r22
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <__floatsisf+0x74>
 9b8:	96 e8       	ldi	r25, 0x86	; 134
 9ba:	86 2f       	mov	r24, r22
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	2a f0       	brmi	.+10     	; 0x9cc <__floatsisf+0x6c>
 9c2:	9a 95       	dec	r25
 9c4:	66 0f       	add	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	da f7       	brpl	.-10     	; 0x9c2 <__floatsisf+0x62>
 9cc:	88 0f       	add	r24, r24
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <__fp_split3>:
 9d6:	57 fd       	sbrc	r21, 7
 9d8:	90 58       	subi	r25, 0x80	; 128
 9da:	44 0f       	add	r20, r20
 9dc:	55 1f       	adc	r21, r21
 9de:	59 f0       	breq	.+22     	; 0x9f6 <__fp_splitA+0x10>
 9e0:	5f 3f       	cpi	r21, 0xFF	; 255
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__fp_splitA+0x1a>
 9e4:	47 95       	ror	r20

000009e6 <__fp_splitA>:
 9e6:	88 0f       	add	r24, r24
 9e8:	97 fb       	bst	r25, 7
 9ea:	99 1f       	adc	r25, r25
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_splitA+0x20>
 9ee:	9f 3f       	cpi	r25, 0xFF	; 255
 9f0:	79 f0       	breq	.+30     	; 0xa10 <__fp_splitA+0x2a>
 9f2:	87 95       	ror	r24
 9f4:	08 95       	ret
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	f2 cf       	rjmp	.-28     	; 0x9e4 <__fp_split3+0xe>
 a00:	46 95       	lsr	r20
 a02:	f1 df       	rcall	.-30     	; 0x9e6 <__fp_splitA>
 a04:	08 c0       	rjmp	.+16     	; 0xa16 <__fp_splitA+0x30>
 a06:	16 16       	cp	r1, r22
 a08:	17 06       	cpc	r1, r23
 a0a:	18 06       	cpc	r1, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	f1 cf       	rjmp	.-30     	; 0x9f2 <__fp_splitA+0xc>
 a10:	86 95       	lsr	r24
 a12:	71 05       	cpc	r23, r1
 a14:	61 05       	cpc	r22, r1
 a16:	08 94       	sec
 a18:	08 95       	ret

00000a1a <__fp_zero>:
 a1a:	e8 94       	clt

00000a1c <__fp_szero>:
 a1c:	bb 27       	eor	r27, r27
 a1e:	66 27       	eor	r22, r22
 a20:	77 27       	eor	r23, r23
 a22:	cb 01       	movw	r24, r22
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0e 94 27 05 	call	0xa4e	; 0xa4e <__mulsf3x>
 a2c:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_round>
 a30:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscA>
 a34:	38 f0       	brcs	.+14     	; 0xa44 <__mulsf3+0x1c>
 a36:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscB>
 a3a:	20 f0       	brcs	.+8      	; 0xa44 <__mulsf3+0x1c>
 a3c:	95 23       	and	r25, r21
 a3e:	11 f0       	breq	.+4      	; 0xa44 <__mulsf3+0x1c>
 a40:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 a44:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_nan>
 a48:	11 24       	eor	r1, r1
 a4a:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>

00000a4e <__mulsf3x>:
 a4e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_split3>
 a52:	70 f3       	brcs	.-36     	; 0xa30 <__mulsf3+0x8>

00000a54 <__mulsf3_pse>:
 a54:	95 9f       	mul	r25, r21
 a56:	c1 f3       	breq	.-16     	; 0xa48 <__mulsf3+0x20>
 a58:	95 0f       	add	r25, r21
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	55 1f       	adc	r21, r21
 a5e:	62 9f       	mul	r22, r18
 a60:	f0 01       	movw	r30, r0
 a62:	72 9f       	mul	r23, r18
 a64:	bb 27       	eor	r27, r27
 a66:	f0 0d       	add	r31, r0
 a68:	b1 1d       	adc	r27, r1
 a6a:	63 9f       	mul	r22, r19
 a6c:	aa 27       	eor	r26, r26
 a6e:	f0 0d       	add	r31, r0
 a70:	b1 1d       	adc	r27, r1
 a72:	aa 1f       	adc	r26, r26
 a74:	64 9f       	mul	r22, r20
 a76:	66 27       	eor	r22, r22
 a78:	b0 0d       	add	r27, r0
 a7a:	a1 1d       	adc	r26, r1
 a7c:	66 1f       	adc	r22, r22
 a7e:	82 9f       	mul	r24, r18
 a80:	22 27       	eor	r18, r18
 a82:	b0 0d       	add	r27, r0
 a84:	a1 1d       	adc	r26, r1
 a86:	62 1f       	adc	r22, r18
 a88:	73 9f       	mul	r23, r19
 a8a:	b0 0d       	add	r27, r0
 a8c:	a1 1d       	adc	r26, r1
 a8e:	62 1f       	adc	r22, r18
 a90:	83 9f       	mul	r24, r19
 a92:	a0 0d       	add	r26, r0
 a94:	61 1d       	adc	r22, r1
 a96:	22 1f       	adc	r18, r18
 a98:	74 9f       	mul	r23, r20
 a9a:	33 27       	eor	r19, r19
 a9c:	a0 0d       	add	r26, r0
 a9e:	61 1d       	adc	r22, r1
 aa0:	23 1f       	adc	r18, r19
 aa2:	84 9f       	mul	r24, r20
 aa4:	60 0d       	add	r22, r0
 aa6:	21 1d       	adc	r18, r1
 aa8:	82 2f       	mov	r24, r18
 aaa:	76 2f       	mov	r23, r22
 aac:	6a 2f       	mov	r22, r26
 aae:	11 24       	eor	r1, r1
 ab0:	9f 57       	subi	r25, 0x7F	; 127
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	9a f0       	brmi	.+38     	; 0xadc <__mulsf3_pse+0x88>
 ab6:	f1 f0       	breq	.+60     	; 0xaf4 <__mulsf3_pse+0xa0>
 ab8:	88 23       	and	r24, r24
 aba:	4a f0       	brmi	.+18     	; 0xace <__mulsf3_pse+0x7a>
 abc:	ee 0f       	add	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	bb 1f       	adc	r27, r27
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	a9 f7       	brne	.-22     	; 0xab8 <__mulsf3_pse+0x64>
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	51 05       	cpc	r21, r1
 ad2:	80 f0       	brcs	.+32     	; 0xaf4 <__mulsf3_pse+0xa0>
 ad4:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_inf>
 ad8:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	e4 f3       	brlt	.-8      	; 0xad8 <__mulsf3_pse+0x84>
 ae0:	98 3e       	cpi	r25, 0xE8	; 232
 ae2:	d4 f3       	brlt	.-12     	; 0xad8 <__mulsf3_pse+0x84>
 ae4:	86 95       	lsr	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	e7 95       	ror	r30
 af0:	9f 5f       	subi	r25, 0xFF	; 255
 af2:	c1 f7       	brne	.-16     	; 0xae4 <__mulsf3_pse+0x90>
 af4:	fe 2b       	or	r31, r30
 af6:	88 0f       	add	r24, r24
 af8:	91 1d       	adc	r25, r1
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__fp_inf>:
 b02:	97 f9       	bld	r25, 7
 b04:	9f 67       	ori	r25, 0x7F	; 127
 b06:	80 e8       	ldi	r24, 0x80	; 128
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	60 e0       	ldi	r22, 0x00	; 0
 b0c:	08 95       	ret

00000b0e <__fp_nan>:
 b0e:	9f ef       	ldi	r25, 0xFF	; 255
 b10:	80 ec       	ldi	r24, 0xC0	; 192
 b12:	08 95       	ret

00000b14 <__fp_pscA>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	16 16       	cp	r1, r22
 b1a:	17 06       	cpc	r1, r23
 b1c:	18 06       	cpc	r1, r24
 b1e:	09 06       	cpc	r0, r25
 b20:	08 95       	ret

00000b22 <__fp_pscB>:
 b22:	00 24       	eor	r0, r0
 b24:	0a 94       	dec	r0
 b26:	12 16       	cp	r1, r18
 b28:	13 06       	cpc	r1, r19
 b2a:	14 06       	cpc	r1, r20
 b2c:	05 06       	cpc	r0, r21
 b2e:	08 95       	ret

00000b30 <__fp_round>:
 b30:	09 2e       	mov	r0, r25
 b32:	03 94       	inc	r0
 b34:	00 0c       	add	r0, r0
 b36:	11 f4       	brne	.+4      	; 0xb3c <__fp_round+0xc>
 b38:	88 23       	and	r24, r24
 b3a:	52 f0       	brmi	.+20     	; 0xb50 <__fp_round+0x20>
 b3c:	bb 0f       	add	r27, r27
 b3e:	40 f4       	brcc	.+16     	; 0xb50 <__fp_round+0x20>
 b40:	bf 2b       	or	r27, r31
 b42:	11 f4       	brne	.+4      	; 0xb48 <__fp_round+0x18>
 b44:	60 ff       	sbrs	r22, 0
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <__fp_round+0x20>
 b48:	6f 5f       	subi	r22, 0xFF	; 255
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
